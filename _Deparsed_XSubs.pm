#
#
# DO NOT EDIT THIS FILE, IT'S AUTOGENERATED FROM XS MODULES AND WILL BE UPDATED AUTOMATICALLY
#
#
package ActivePerl {
sub BUILD;
sub CHANGELIST;
sub PRODUCT;
}
package ActiveState::Scineplex {
sub AnnotateXS;
}
package ActiveState::Win32::Shell {
sub FindExecutable;
sub _ShellExecute;
}
package B {
sub CLONE;
sub address;
sub amagic_generation;
sub begin_av;
sub cast_I32;
sub cchar;
sub check_av;
sub comppadlist;
sub cstring;
sub curstash;
sub defstash;
sub diehook;
sub dowarn;
sub end_av;
sub formfeed;
sub hash;
sub inc_gv;
sub init_av;
sub main_cv;
sub main_root;
sub main_start;
sub minus_c;
sub opnumber;
sub perlstring;
sub ppname;
sub regex_padav;
sub save_BEGINs;
sub sub_generation;
sub sv_no;
sub sv_undef;
sub sv_yes;
sub svref_2object;
sub threadsv_names;
sub unitcheck_av;
sub walkoptree;
sub walkoptree_debug;
sub warnhook;
}
package B::AV {
sub ARRAY;
sub ARRAYelt;
sub FILL;
sub MAX;
}
package B::BINOP {
sub last;
}
package B::BM {
sub PREVIOUS;
sub RARE;
sub TABLE;
sub USEFUL;
}
package B::COP {
sub arybase;
sub cop_seq;
sub file;
sub filegv;
sub hints;
sub hints_hash;
sub io;
sub label;
sub line;
sub stash;
sub stashoff;
sub stashpv;
sub warnings;
}
package B::CV {
sub CONST;
sub CvFLAGS;
sub DEPTH;
sub FILE;
sub GV;
sub HSCXT;
sub NAME_HEK;
sub OUTSIDE;
sub OUTSIDE_SEQ;
sub PADLIST;
sub ROOT;
sub START;
sub STASH;
sub XSUB;
sub XSUBANY;
sub const_sv;
}
package B::Deparse {
sub main_cv;
sub main_root;
sub main_start;
sub opnumber;
sub perlstring;
sub svref_2object;
}
package B::FM {
sub LINES;
}
package B::GV {
sub AV;
sub CV;
sub CVGEN;
sub EGV;
sub FILE;
sub FILEGV;
sub FORM;
sub GP;
sub GPFLAGS;
sub GvFLAGS;
sub GvREFCNT;
sub HV;
sub IO;
sub LINE;
sub NAME;
sub STASH;
sub SV;
sub isGV_with_GP;
sub is_empty;
}
package B::HE {
sub HASH;
sub SVKEY_force;
sub VAL;
}
package B::HV {
sub ARRAY;
sub FILL;
sub KEYS;
sub MAX;
sub NAME;
sub RITER;
}
package B::IO {
sub BOTTOM_GV;
sub BOTTOM_NAME;
sub FMT_GV;
sub FMT_NAME;
sub IoFLAGS;
sub IoTYPE;
sub IsSTD;
sub LINES;
sub LINES_LEFT;
sub PAGE;
sub PAGE_LEN;
sub TOP_GV;
sub TOP_NAME;
}
package B::IV {
sub IV;
sub IVX;
sub RV;
sub UVX;
sub needs64bits;
sub packiv;
}
package B::LISTOP {
sub children;
}
package B::LOGOP {
sub other;
}
package B::LOOP {
sub lastop;
sub nextop;
sub redoop;
}
package B::MAGIC {
sub FLAGS;
sub LENGTH;
sub MOREMAGIC;
sub OBJ;
sub PRIVATE;
sub PTR;
sub REGEX;
sub TYPE;
sub precomp;
}
package B::METHOP {
sub first;
sub meth_sv;
sub rclass;
}
package B::NV {
sub NV;
sub NVX;
}
package B::OP {
sub desc;
sub flags;
sub folded;
sub moresib;
sub name;
sub next;
sub oplist;
sub opt;
sub parent;
sub ppaddr;
sub private;
sub savefree;
sub sibling;
sub size;
sub slabbed;
sub spare;
sub static;
sub targ;
sub type;
}
package B::PADLIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub NAMES;
sub REFCNT;
sub id;
sub outid;
}
package B::PADNAME {
sub COP_SEQ_RANGE_HIGH;
sub COP_SEQ_RANGE_LOW;
sub FLAGS;
sub LEN;
sub OURSTASH;
sub PARENT_FAKELEX_FLAGS;
sub PARENT_PAD_INDEX;
sub PROTOCV;
sub PV;
sub PVX;
sub REFCNT;
sub SvSTASH;
sub TYPE;
}
package B::PADNAMELIST {
sub ARRAY;
sub ARRAYelt;
sub MAX;
sub REFCNT;
}
package B::PADOP {
sub gv;
sub padix;
sub sv;
}
package B::PMOP {
sub code_list;
sub pmflags;
sub pmoffset;
sub pmregexp;
sub pmreplroot;
sub pmreplstart;
sub pmstash;
sub pmstashpv;
sub precomp;
sub reflags;
}
package B::PV {
sub CUR;
sub LEN;
sub PV;
sub PVBM;
sub PVX;
sub RV;
sub as_string;
}
package B::PVLV {
sub TARG;
sub TARGLEN;
sub TARGOFF;
sub TYPE;
}
package B::PVMG {
sub MAGIC;
sub SvSTASH;
}
package B::PVOP {
sub pv;
}
package B::REGEXP {
sub REGEX;
sub compflags;
sub precomp;
sub qr_anoncv;
}
package B::RHE {
sub HASH;
}
package B::SV {
sub FLAGS;
sub MAGICAL;
sub POK;
sub REFCNT;
sub ROK;
sub SvTYPE;
sub object_2svref;
}
package B::SVOP {
sub gv;
sub sv;
}
package B::UNOP {
sub first;
}
package B::UNOP_AUX {
sub aux_list;
sub string;
}
package Bit::Vector {
sub Abs;
sub Absolute;
sub And;
sub AndNot;
sub Bit_Copy;
sub Bit_Off;
sub Bit_On;
sub Block_Read;
sub Block_Store;
sub Chunk_List_Read;
sub Chunk_List_Store;
sub Chunk_Read;
sub Chunk_Store;
sub Clone;
sub Closure;
sub Compare;
sub Complement;
sub Concat;
sub Concat_List;
sub Copy;
sub Create;
sub DESTROY;
sub Delete;
sub Difference;
sub Divide;
sub Empty;
sub Empty_Interval;
sub ExclusiveOr;
sub Fill;
sub Fill_Interval;
sub Flip;
sub Flip_Interval;
sub GCD;
sub Index_List_Read;
sub Index_List_Remove;
sub Index_List_Store;
sub Insert;
sub Intersection;
sub Interval_Copy;
sub Interval_Empty;
sub Interval_Fill;
sub Interval_Flip;
sub Interval_Reverse;
sub Interval_Scan_dec;
sub Interval_Scan_inc;
sub Interval_Substitute;
sub LSB;
sub Lexicompare;
sub Long_Bits;
sub MSB;
sub Max;
sub Min;
sub Move_Left;
sub Move_Right;
sub Multiplication;
sub Multiply;
sub Neg;
sub Negate;
sub Norm2;
sub Norm3;
sub Norm;
sub Not;
sub Or;
sub Power;
sub Primes;
sub Product;
sub Resize;
sub Reverse;
sub Shadow;
sub Sign;
sub Size;
sub Transpose;
sub Unfake;
sub Union;
sub Version;
sub Word_Bits;
sub Word_Delete;
sub Word_Insert;
sub Word_List_Read;
sub Word_List_Store;
sub Word_Read;
sub Word_Size;
sub Word_Store;
sub Xor;
sub add;
sub bit_flip;
sub bit_test;
sub contains;
sub dec;
sub decrement;
sub equal;
sub flip;
sub from_ASCII;
sub from_Bin;
sub from_Dec;
sub from_Enum;
sub from_Hex;
sub from_string;
sub in;
sub inc;
sub inclusion;
sub increment;
sub is_empty;
sub is_full;
sub lsb;
sub msb;
sub new;
sub new_Bin;
sub new_Dec;
sub new_Enum;
sub new_Hex;
sub rotate_left;
sub rotate_right;
sub shift_left;
sub shift_right;
sub sub;
sub subset;
sub subtract;
sub to_ASCII;
sub to_Bin;
sub to_Dec;
sub to_Enum;
sub to_Hex;
sub to_String;
}
package Carp {
sub downgrade;
sub is_utf8;
}
package Class::Load {
sub is_class_loaded;
}
package Class::Load::XS {
sub is_class_loaded;
}
package Class::MOP {
sub blessed($) ;
sub check_package_cache_flag($) ;
sub get_code_info($) ;
sub isweak($) ;
sub weaken($) ;
}
package Class::MOP::Attribute {
sub associated_class;
sub associated_methods;
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Class {
sub all(&@) ;
sub blessed($) ;
sub constructor_class;
sub constructor_name;
sub destructor_class;
sub immutable_trait;
sub instance_metaclass;
sub subname;
}
package Class::MOP::Instance {
sub associated_metaclass;
sub blessed($) ;
sub isweak($) ;
sub slot_hash;
sub slots;
sub weaken($) ;
}
package Class::MOP::Method {
sub blessed($) ;
sub body;
sub is_stub;
sub name;
sub package_name;
sub reftype($) ;
sub weaken($) ;
}
package Class::MOP::Method::Accessor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Constructor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Generated {
sub definition_context;
sub is_inline;
}
package Class::MOP::Method::Inlined {
sub _expected_method_class;
sub refaddr($) ;
}
package Class::MOP::Method::Meta {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Wrapped {
sub blessed($) ;
sub subname;
}
package Class::MOP::Mixin {
sub blessed($) ;
}
package Class::MOP::Mixin::AttributeCore {
sub accessor;
sub blessed($) ;
sub builder;
sub clearer;
sub definition_context;
sub init_arg;
sub initializer;
sub insertion_order;
sub name;
sub predicate;
sub reader;
sub writer;
}
package Class::MOP::Mixin::HasAttributes {
sub _attribute_map;
sub attribute_metaclass;
sub blessed($) ;
}
package Class::MOP::Mixin::HasMethods {
sub _method_map;
sub blessed($) ;
sub method_metaclass;
sub reftype($) ;
sub subname;
sub wrapped_method_metaclass;
}
package Class::MOP::Mixin::HasOverloads {
sub blessed($) ;
}
package Class::MOP::Object {
sub blessed($) ;
}
package Class::MOP::Overload {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Package {
sub blessed($) ;
sub name;
sub weaken($) ;
}
package Clone {
sub clone($;$) ;
}
package Compress::Raw::Bunzip2 {
sub DESTROY;
sub DispStream;
sub bzinflate;
sub compressedBytes;
sub inflateCount;
sub new;
sub status;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Bzip2 {
sub DESTROY;
sub DispStream;
sub bzclose;
sub bzdeflate;
sub bzflush;
sub bzlibversion;
sub compressedBytes;
sub constant;
sub new;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Zlib {
sub ZLIB_VERNUM;
sub _deflateInit;
sub _inflateInit;
sub _inflateScanInit;
sub adler32;
sub adler32_combine;
sub constant;
sub crc32;
sub crc32_combine;
sub zlibCompileFlags;
sub zlib_version;
}
package Compress::Raw::Zlib::deflateStream {
sub DESTROY;
sub DispStream;
sub _deflateParams;
sub adler32;
sub compressedBytes;
sub crc32;
sub deflate;
sub deflateReset;
sub deflateTune;
sub dict_adler;
sub flush;
sub get_Bufsize;
sub get_Level;
sub get_Strategy;
sub msg;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateScanStream {
sub DESTROY;
sub DispStream;
sub _createDeflateStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub getEndOffset;
sub getLastBlockOffset;
sub getLastBufferOffset;
sub inflateCount;
sub inflateReset;
sub resetLastBlockByte;
sub scan;
sub status;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateStream {
sub DESTROY;
sub DispStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub dict_adler;
sub get_Bufsize;
sub inflate;
sub inflateCount;
sub inflateReset;
sub inflateSync;
sub msg;
sub set_Append;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Config {
sub AUTOLOAD;
}
package Cpanel::JSON::XS {
sub CLONE;
sub DESTROY;
sub _from_json($;$) ;
sub _to_json($) ;
sub allow_barekey;
sub allow_bignum;
sub allow_blessed;
sub allow_nonref;
sub allow_singlequote;
sub allow_stringify;
sub allow_tags;
sub allow_unknown;
sub ascii;
sub binary;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($;$) ;
sub decode_prefix;
sub encode;
sub encode_json($) ;
sub escape_slash;
sub filter_json_object;
sub filter_json_single_key_object;
sub get_allow_barekey;
sub get_allow_bignum;
sub get_allow_blessed;
sub get_allow_nonref;
sub get_allow_singlequote;
sub get_allow_stringify;
sub get_allow_tags;
sub get_allow_unknown;
sub get_ascii;
sub get_binary;
sub get_canonical;
sub get_convert_blessed;
sub get_escape_slash;
sub get_indent;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_stringify_infnan;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub shrink;
sub sort_by;
sub space_after;
sub space_before;
sub stringify_infnan;
sub utf8;
}
package Cwd {
sub CLONE;
sub getdcwd(;@) ;
}
package DB {
sub DB_profiler;
sub _CHECK;
sub _END;
sub _INIT;
sub _finish;
sub disable_profile;
sub enable_profile;
sub finish_profile;
sub init_profiler;
sub set_option;
}
package DBD::ODBC::db {
sub DESTROY;
sub FETCH;
sub GetFunctions;
sub STORE;
sub _ExecDirect;
sub _GetForeignKeys;
sub _GetInfo;
sub _GetPrimaryKeys;
sub _GetSpecialColumns;
sub _GetStatistics;
sub _GetTypeInfo;
sub _columns;
sub _login;
sub commit;
sub disconnect;
sub odbc_getdiagfield;
sub odbc_getdiagrec;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
}
package DBD::ODBC::dr {
sub _data_sources;
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::ODBC::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _Cancel;
sub _ColAttributes;
sub _prepare;
sub _primary_keys;
sub _statistics;
sub _tables;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub odbc_describe_param;
sub odbc_execute_for_fetch;
sub odbc_getdiagfield;
sub odbc_getdiagrec;
sub odbc_lob_read($$$$;$) ;
sub odbc_rows;
}
package DBD::Oracle::db {
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
}
package DBD::Pg {
sub PG_ABSTIME() ;
sub PG_ABSTIMEARRAY() ;
sub PG_ACLITEM() ;
sub PG_ACLITEMARRAY() ;
sub PG_ANY() ;
sub PG_ANYARRAY() ;
sub PG_ANYELEMENT() ;
sub PG_ANYENUM() ;
sub PG_ANYNONARRAY() ;
sub PG_ANYRANGE() ;
sub PG_ASYNC() ;
sub PG_BIT() ;
sub PG_BITARRAY() ;
sub PG_BOOL() ;
sub PG_BOOLARRAY() ;
sub PG_BOX() ;
sub PG_BOXARRAY() ;
sub PG_BPCHAR() ;
sub PG_BPCHARARRAY() ;
sub PG_BYTEA() ;
sub PG_BYTEAARRAY() ;
sub PG_CHAR() ;
sub PG_CHARARRAY() ;
sub PG_CID() ;
sub PG_CIDARRAY() ;
sub PG_CIDR() ;
sub PG_CIDRARRAY() ;
sub PG_CIRCLE() ;
sub PG_CIRCLEARRAY() ;
sub PG_CSTRING() ;
sub PG_CSTRINGARRAY() ;
sub PG_DATE() ;
sub PG_DATEARRAY() ;
sub PG_DATERANGE() ;
sub PG_DATERANGEARRAY() ;
sub PG_EVENT_TRIGGER() ;
sub PG_FDW_HANDLER() ;
sub PG_FLOAT4() ;
sub PG_FLOAT4ARRAY() ;
sub PG_FLOAT8() ;
sub PG_FLOAT8ARRAY() ;
sub PG_GTSVECTOR() ;
sub PG_GTSVECTORARRAY() ;
sub PG_INET() ;
sub PG_INETARRAY() ;
sub PG_INT2() ;
sub PG_INT2ARRAY() ;
sub PG_INT2VECTOR() ;
sub PG_INT2VECTORARRAY() ;
sub PG_INT4() ;
sub PG_INT4ARRAY() ;
sub PG_INT4RANGE() ;
sub PG_INT4RANGEARRAY() ;
sub PG_INT8() ;
sub PG_INT8ARRAY() ;
sub PG_INT8RANGE() ;
sub PG_INT8RANGEARRAY() ;
sub PG_INTERNAL() ;
sub PG_INTERVAL() ;
sub PG_INTERVALARRAY() ;
sub PG_JSON() ;
sub PG_JSONARRAY() ;
sub PG_JSONB() ;
sub PG_JSONBARRAY() ;
sub PG_LANGUAGE_HANDLER() ;
sub PG_LINE() ;
sub PG_LINEARRAY() ;
sub PG_LSEG() ;
sub PG_LSEGARRAY() ;
sub PG_MACADDR() ;
sub PG_MACADDRARRAY() ;
sub PG_MONEY() ;
sub PG_MONEYARRAY() ;
sub PG_NAME() ;
sub PG_NAMEARRAY() ;
sub PG_NUMERIC() ;
sub PG_NUMERICARRAY() ;
sub PG_NUMRANGE() ;
sub PG_NUMRANGEARRAY() ;
sub PG_OID() ;
sub PG_OIDARRAY() ;
sub PG_OIDVECTOR() ;
sub PG_OIDVECTORARRAY() ;
sub PG_OLDQUERY_CANCEL() ;
sub PG_OLDQUERY_WAIT() ;
sub PG_OPAQUE() ;
sub PG_PATH() ;
sub PG_PATHARRAY() ;
sub PG_PG_ATTRIBUTE() ;
sub PG_PG_CLASS() ;
sub PG_PG_LSN() ;
sub PG_PG_LSNARRAY() ;
sub PG_PG_NODE_TREE() ;
sub PG_PG_PROC() ;
sub PG_PG_TYPE() ;
sub PG_POINT() ;
sub PG_POINTARRAY() ;
sub PG_POLYGON() ;
sub PG_POLYGONARRAY() ;
sub PG_RECORD() ;
sub PG_RECORDARRAY() ;
sub PG_REFCURSOR() ;
sub PG_REFCURSORARRAY() ;
sub PG_REGCLASS() ;
sub PG_REGCLASSARRAY() ;
sub PG_REGCONFIG() ;
sub PG_REGCONFIGARRAY() ;
sub PG_REGDICTIONARY() ;
sub PG_REGDICTIONARYARRAY() ;
sub PG_REGOPER() ;
sub PG_REGOPERARRAY() ;
sub PG_REGOPERATOR() ;
sub PG_REGOPERATORARRAY() ;
sub PG_REGPROC() ;
sub PG_REGPROCARRAY() ;
sub PG_REGPROCEDURE() ;
sub PG_REGPROCEDUREARRAY() ;
sub PG_REGTYPE() ;
sub PG_REGTYPEARRAY() ;
sub PG_RELTIME() ;
sub PG_RELTIMEARRAY() ;
sub PG_SMGR() ;
sub PG_TEXT() ;
sub PG_TEXTARRAY() ;
sub PG_TID() ;
sub PG_TIDARRAY() ;
sub PG_TIME() ;
sub PG_TIMEARRAY() ;
sub PG_TIMESTAMP() ;
sub PG_TIMESTAMPARRAY() ;
sub PG_TIMESTAMPTZ() ;
sub PG_TIMESTAMPTZARRAY() ;
sub PG_TIMETZ() ;
sub PG_TIMETZARRAY() ;
sub PG_TINTERVAL() ;
sub PG_TINTERVALARRAY() ;
sub PG_TRIGGER() ;
sub PG_TSQUERY() ;
sub PG_TSQUERYARRAY() ;
sub PG_TSRANGE() ;
sub PG_TSRANGEARRAY() ;
sub PG_TSTZRANGE() ;
sub PG_TSTZRANGEARRAY() ;
sub PG_TSVECTOR() ;
sub PG_TSVECTORARRAY() ;
sub PG_TXID_SNAPSHOT() ;
sub PG_TXID_SNAPSHOTARRAY() ;
sub PG_UNKNOWN() ;
sub PG_UUID() ;
sub PG_UUIDARRAY() ;
sub PG_VARBIT() ;
sub PG_VARBITARRAY() ;
sub PG_VARCHAR() ;
sub PG_VARCHARARRAY() ;
sub PG_VOID() ;
sub PG_XID() ;
sub PG_XIDARRAY() ;
sub PG_XML() ;
sub PG_XMLARRAY() ;
sub constant() ;
}
package DBD::Pg::db {
sub DESTROY;
sub FETCH;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub STORE;
sub _login;
sub _pg_type_info;
sub _ping;
sub commit;
sub disconnect;
sub do($$;$@) ;
sub endcopy;
sub getfd;
sub getline;
sub lo_close;
sub lo_creat;
sub lo_export;
sub lo_import;
sub lo_lseek;
sub lo_open;
sub lo_read;
sub lo_tell;
sub lo_unlink;
sub lo_write;
sub pg_cancel;
sub pg_endcopy;
sub pg_getcopydata;
sub pg_getcopydata_async;
sub pg_getline;
sub pg_lo_close;
sub pg_lo_creat;
sub pg_lo_export;
sub pg_lo_import;
sub pg_lo_import_with_oid;
sub pg_lo_lseek;
sub pg_lo_open;
sub pg_lo_read;
sub pg_lo_tell;
sub pg_lo_truncate;
sub pg_lo_unlink;
sub pg_lo_write;
sub pg_notifies;
sub pg_putcopydata;
sub pg_putcopyend;
sub pg_putline;
sub pg_ready;
sub pg_release;
sub pg_result;
sub pg_rollback_to;
sub pg_savepoint;
sub pg_server_trace;
sub pg_server_untrace;
sub putline;
sub quote;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub state;
}
package DBD::Pg::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::Pg::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub cancel;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub pg_cancel;
sub pg_ready;
sub pg_result;
sub rows;
sub state;
}
package DBD::SQLite {
sub ALTER_TABLE() ;
sub ANALYZE() ;
sub ATTACH() ;
sub COPY() ;
sub CREATE_INDEX() ;
sub CREATE_TABLE() ;
sub CREATE_TEMP_INDEX() ;
sub CREATE_TEMP_TABLE() ;
sub CREATE_TEMP_TRIGGER() ;
sub CREATE_TEMP_VIEW() ;
sub CREATE_TRIGGER() ;
sub CREATE_VIEW() ;
sub CREATE_VTABLE() ;
sub DELETE() ;
sub DENY() ;
sub DETACH() ;
sub DROP_INDEX() ;
sub DROP_TABLE() ;
sub DROP_TEMP_INDEX() ;
sub DROP_TEMP_TABLE() ;
sub DROP_TEMP_TRIGGER() ;
sub DROP_TEMP_VIEW() ;
sub DROP_TRIGGER() ;
sub DROP_VIEW() ;
sub DROP_VTABLE() ;
sub FUNCTION() ;
sub IGNORE() ;
sub INSERT() ;
sub OK() ;
sub OPEN_CREATE() ;
sub OPEN_FULLMUTEX() ;
sub OPEN_MEMORY() ;
sub OPEN_NOMUTEX() ;
sub OPEN_PRIVATECACHE() ;
sub OPEN_READONLY() ;
sub OPEN_READWRITE() ;
sub OPEN_SHAREDCACHE() ;
sub OPEN_URI() ;
sub PRAGMA() ;
sub READ() ;
sub RECURSIVE() ;
sub REINDEX() ;
sub SAVEPOINT() ;
sub SELECT() ;
sub TRANSACTION() ;
sub UPDATE() ;
sub _const__authorizer_action_codes() ;
sub _const__authorizer_action_codes_3006008() ;
sub _const__authorizer_action_codes_3008003() ;
sub _const__authorizer_return_codes() ;
sub _const__flags_for_file_open_operations() ;
sub _const__flags_for_file_open_operations_3006002() ;
sub _const__flags_for_file_open_operations_3006018() ;
sub _const__flags_for_file_open_operations_3007007() ;
sub _const__flags_for_file_open_operations_3007013() ;
sub compile_options;
sub sqlite_status;
sub strglob;
sub strlike;
}
package DBD::SQLite::Constants {
sub SQLITE_ABORT() ;
sub SQLITE_ABORT_ROLLBACK() ;
sub SQLITE_ALTER_TABLE() ;
sub SQLITE_ANALYZE() ;
sub SQLITE_ATTACH() ;
sub SQLITE_AUTH() ;
sub SQLITE_AUTH_USER() ;
sub SQLITE_BLOB() ;
sub SQLITE_BUSY() ;
sub SQLITE_BUSY_RECOVERY() ;
sub SQLITE_BUSY_SNAPSHOT() ;
sub SQLITE_CANTOPEN() ;
sub SQLITE_CANTOPEN_CONVPATH() ;
sub SQLITE_CANTOPEN_FULLPATH() ;
sub SQLITE_CANTOPEN_ISDIR() ;
sub SQLITE_CANTOPEN_NOTEMPDIR() ;
sub SQLITE_CONSTRAINT() ;
sub SQLITE_CONSTRAINT_CHECK() ;
sub SQLITE_CONSTRAINT_COMMITHOOK() ;
sub SQLITE_CONSTRAINT_FOREIGNKEY() ;
sub SQLITE_CONSTRAINT_FUNCTION() ;
sub SQLITE_CONSTRAINT_NOTNULL() ;
sub SQLITE_CONSTRAINT_PRIMARYKEY() ;
sub SQLITE_CONSTRAINT_ROWID() ;
sub SQLITE_CONSTRAINT_TRIGGER() ;
sub SQLITE_CONSTRAINT_UNIQUE() ;
sub SQLITE_CONSTRAINT_VTAB() ;
sub SQLITE_COPY() ;
sub SQLITE_CORRUPT() ;
sub SQLITE_CORRUPT_VTAB() ;
sub SQLITE_CREATE_INDEX() ;
sub SQLITE_CREATE_TABLE() ;
sub SQLITE_CREATE_TEMP_INDEX() ;
sub SQLITE_CREATE_TEMP_TABLE() ;
sub SQLITE_CREATE_TEMP_TRIGGER() ;
sub SQLITE_CREATE_TEMP_VIEW() ;
sub SQLITE_CREATE_TRIGGER() ;
sub SQLITE_CREATE_VIEW() ;
sub SQLITE_CREATE_VTABLE() ;
sub SQLITE_DELETE() ;
sub SQLITE_DENY() ;
sub SQLITE_DETACH() ;
sub SQLITE_DETERMINISTIC() ;
sub SQLITE_DONE() ;
sub SQLITE_DROP_INDEX() ;
sub SQLITE_DROP_TABLE() ;
sub SQLITE_DROP_TEMP_INDEX() ;
sub SQLITE_DROP_TEMP_TABLE() ;
sub SQLITE_DROP_TEMP_TRIGGER() ;
sub SQLITE_DROP_TEMP_VIEW() ;
sub SQLITE_DROP_TRIGGER() ;
sub SQLITE_DROP_VIEW() ;
sub SQLITE_DROP_VTABLE() ;
sub SQLITE_EMPTY() ;
sub SQLITE_ERROR() ;
sub SQLITE_FLOAT() ;
sub SQLITE_FORMAT() ;
sub SQLITE_FULL() ;
sub SQLITE_FUNCTION() ;
sub SQLITE_IGNORE() ;
sub SQLITE_INSERT() ;
sub SQLITE_INTEGER() ;
sub SQLITE_INTERNAL() ;
sub SQLITE_INTERRUPT() ;
sub SQLITE_IOERR() ;
sub SQLITE_IOERR_ACCESS() ;
sub SQLITE_IOERR_AUTH() ;
sub SQLITE_IOERR_BLOCKED() ;
sub SQLITE_IOERR_CHECKRESERVEDLOCK() ;
sub SQLITE_IOERR_CLOSE() ;
sub SQLITE_IOERR_CONVPATH() ;
sub SQLITE_IOERR_DELETE() ;
sub SQLITE_IOERR_DELETE_NOENT() ;
sub SQLITE_IOERR_DIR_CLOSE() ;
sub SQLITE_IOERR_DIR_FSYNC() ;
sub SQLITE_IOERR_FSTAT() ;
sub SQLITE_IOERR_FSYNC() ;
sub SQLITE_IOERR_GETTEMPPATH() ;
sub SQLITE_IOERR_LOCK() ;
sub SQLITE_IOERR_MMAP() ;
sub SQLITE_IOERR_NOMEM() ;
sub SQLITE_IOERR_RDLOCK() ;
sub SQLITE_IOERR_READ() ;
sub SQLITE_IOERR_SEEK() ;
sub SQLITE_IOERR_SHMLOCK() ;
sub SQLITE_IOERR_SHMMAP() ;
sub SQLITE_IOERR_SHMOPEN() ;
sub SQLITE_IOERR_SHMSIZE() ;
sub SQLITE_IOERR_SHORT_READ() ;
sub SQLITE_IOERR_TRUNCATE() ;
sub SQLITE_IOERR_UNLOCK() ;
sub SQLITE_IOERR_VNODE() ;
sub SQLITE_IOERR_WRITE() ;
sub SQLITE_LOCKED() ;
sub SQLITE_LOCKED_SHAREDCACHE() ;
sub SQLITE_MISMATCH() ;
sub SQLITE_MISUSE() ;
sub SQLITE_NOLFS() ;
sub SQLITE_NOMEM() ;
sub SQLITE_NOTADB() ;
sub SQLITE_NOTFOUND() ;
sub SQLITE_NOTICE() ;
sub SQLITE_NOTICE_RECOVER_ROLLBACK() ;
sub SQLITE_NOTICE_RECOVER_WAL() ;
sub SQLITE_NULL() ;
sub SQLITE_OK() ;
sub SQLITE_OPEN_CREATE() ;
sub SQLITE_OPEN_FULLMUTEX() ;
sub SQLITE_OPEN_MEMORY() ;
sub SQLITE_OPEN_NOMUTEX() ;
sub SQLITE_OPEN_PRIVATECACHE() ;
sub SQLITE_OPEN_READONLY() ;
sub SQLITE_OPEN_READWRITE() ;
sub SQLITE_OPEN_SHAREDCACHE() ;
sub SQLITE_OPEN_URI() ;
sub SQLITE_PERM() ;
sub SQLITE_PRAGMA() ;
sub SQLITE_PROTOCOL() ;
sub SQLITE_RANGE() ;
sub SQLITE_READ() ;
sub SQLITE_READONLY() ;
sub SQLITE_READONLY_CANTLOCK() ;
sub SQLITE_READONLY_DBMOVED() ;
sub SQLITE_READONLY_RECOVERY() ;
sub SQLITE_READONLY_ROLLBACK() ;
sub SQLITE_RECURSIVE() ;
sub SQLITE_REINDEX() ;
sub SQLITE_ROW() ;
sub SQLITE_SAVEPOINT() ;
sub SQLITE_SCHEMA() ;
sub SQLITE_SELECT() ;
sub SQLITE_TOOBIG() ;
sub SQLITE_TRANSACTION() ;
sub SQLITE_UPDATE() ;
sub SQLITE_VERSION_NUMBER() ;
sub SQLITE_WARNING() ;
sub SQLITE_WARNING_AUTOINDEX() ;
sub _const_authorizer_action_codes() ;
sub _const_authorizer_action_codes_3006008() ;
sub _const_authorizer_action_codes_3008003() ;
sub _const_authorizer_return_codes() ;
sub _const_compile_time_library_version_numbers() ;
sub _const_extended_result_codes_3006002() ;
sub _const_extended_result_codes_3006005() ;
sub _const_extended_result_codes_3006007() ;
sub _const_extended_result_codes_3006012() ;
sub _const_extended_result_codes_3007000() ;
sub _const_extended_result_codes_3007007() ;
sub _const_extended_result_codes_3007011() ;
sub _const_extended_result_codes_3007012() ;
sub _const_extended_result_codes_3007015() ;
sub _const_extended_result_codes_3007016() ;
sub _const_extended_result_codes_3007017() ;
sub _const_extended_result_codes_3008000() ;
sub _const_extended_result_codes_3008001() ;
sub _const_extended_result_codes_3008002() ;
sub _const_extended_result_codes_3008003() ;
sub _const_extended_result_codes_3008007() ;
sub _const_extended_result_codes_3009000() ;
sub _const_extended_result_codes_3010000() ;
sub _const_flags_for_file_open_operations() ;
sub _const_flags_for_file_open_operations_3006002() ;
sub _const_flags_for_file_open_operations_3006018() ;
sub _const_flags_for_file_open_operations_3007007() ;
sub _const_flags_for_file_open_operations_3007013() ;
sub _const_function_flags_3008003() ;
sub _const_fundamental_datatypes() ;
sub _const_result_codes() ;
sub _const_result_codes_3007017() ;
}
package DBD::SQLite::db {
sub DESTROY;
sub FETCH;
sub STORE;
sub _do;
sub _login;
sub backup_from_file;
sub backup_to_file;
sub busy_timeout;
sub collation_needed;
sub commit;
sub commit_hook;
sub create_aggregate;
sub create_collation;
sub create_function;
sub create_module;
sub db_filename;
sub db_status;
sub disconnect;
sub enable_load_extension;
sub last_insert_id;
sub last_insert_rowid;
sub load_extension;
sub profile;
sub progress_handler;
sub register_fts3_perl_tokenizer;
sub rollback;
sub rollback_hook;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub set_authorizer;
sub sqlite_backup_from_file;
sub sqlite_backup_to_file;
sub sqlite_busy_timeout;
sub sqlite_collation_needed;
sub sqlite_commit_hook;
sub sqlite_create_aggregate;
sub sqlite_create_collation;
sub sqlite_create_function;
sub sqlite_create_module;
sub sqlite_db_filename;
sub sqlite_db_status;
sub sqlite_enable_load_extension;
sub sqlite_last_insert_rowid;
sub sqlite_load_extension;
sub sqlite_profile;
sub sqlite_progress_handler;
sub sqlite_register_fts3_perl_tokenizer;
sub sqlite_rollback_hook;
sub sqlite_set_authorizer;
sub sqlite_table_column_metadata;
sub sqlite_trace;
sub sqlite_update_hook;
sub table_column_metadata;
sub update_hook;
}
package DBD::SQLite::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::SQLite::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub rows;
sub sqlite_st_status;
sub st_status;
}
package DBD::_::common {
sub DELETE;
sub DESTROY;
sub FETCH;
sub STORE;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub private_data;
sub rows;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
}
package DBD::_::db {
sub connected;
sub preparse;
sub take_imp_data;
}
package DBD::_::dr {
sub dbixs_revision;
}
package DBD::_::st {
sub DESTROY;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub fetch;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub rows;
}
package DBD::_mem::common {
sub DESTROY;
}
package DBI {
sub DBIf_TRACE_CON() ;
sub DBIf_TRACE_DBD() ;
sub DBIf_TRACE_ENC() ;
sub DBIf_TRACE_SQL() ;
sub DBIf_TRACE_TXN() ;
sub DBIpp_cm_XX() ;
sub DBIpp_cm_br() ;
sub DBIpp_cm_cs() ;
sub DBIpp_cm_dd() ;
sub DBIpp_cm_dw() ;
sub DBIpp_cm_hs() ;
sub DBIpp_ph_XX() ;
sub DBIpp_ph_cn() ;
sub DBIpp_ph_cs() ;
sub DBIpp_ph_qm() ;
sub DBIpp_ph_sp() ;
sub DBIpp_st_XX() ;
sub DBIpp_st_bs() ;
sub DBIpp_st_qq() ;
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_CURSOR_DYNAMIC() ;
sub SQL_CURSOR_FORWARD_ONLY() ;
sub SQL_CURSOR_KEYSET_DRIVEN() ;
sub SQL_CURSOR_STATIC() ;
sub SQL_CURSOR_TYPE_DEFAULT() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _clone_dbis;
sub _concat_hash_sorted;
sub _dbi_state_lval;
sub _debug_dispatch;
sub _get_imp_data;
sub _handles;
sub _install_method;
sub _new_handle;
sub _setup_handle;
sub _svdump;
sub constant() ;
sub dbi_profile;
sub dbi_profile_merge;
sub dbi_profile_merge_nodes;
sub dbi_time;
sub dump_handle;
sub hash;
sub looks_like_number;
sub neat;
sub set_err;
sub sql_type_cast;
sub trace;
sub trace_msg;
}
package DBI::common {
sub CLEAR;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FETCH_many;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub can;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub func;
sub parse_trace_flag;
sub parse_trace_flags;
sub private_attribute_info;
sub private_data;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
sub visit_child_handles;
}
package DBI::db {
sub TIEHASH;
sub begin_work;
sub clone;
sub column_info;
sub commit;
sub connected;
sub data_sources;
sub disconnect;
sub do;
sub foreign_key_info;
sub get_info;
sub last_insert_id;
sub ping;
sub prepare;
sub prepare_cached;
sub preparse;
sub primary_key;
sub primary_key_info;
sub quote;
sub quote_identifier;
sub rollback;
sub rows;
sub selectall_array;
sub selectall_arrayref;
sub selectall_hashref;
sub selectcol_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub selectrow_hashref;
sub statistics_info;
sub table_info;
sub tables;
sub take_imp_data;
sub type_info;
sub type_info_all;
}
package DBI::dr {
sub TIEHASH;
sub connect;
sub connect_cached;
sub data_sources;
sub dbixs_revision;
sub default_user;
sub disconnect_all;
}
package DBI::st {
sub TIEHASH;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub bind_columns;
sub bind_param;
sub bind_param_array;
sub bind_param_inout;
sub bind_param_inout_array;
sub blob_copy_to_file;
sub blob_read;
sub cancel;
sub dump_results;
sub execute;
sub execute_array;
sub execute_for_fetch;
sub fetch;
sub fetchall_arrayref;
sub fetchall_hashref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub more_results;
sub rows;
}
package DBI::var {
sub FETCH;
}
package Data::Dumper {
sub Dumpxs($;$$) ;
sub _vstring($) ;
}
package Devel::NYTProf::Data {
sub load_profile_data_from_file;
}
package Devel::NYTProf::Test {
sub example_xsub;
sub example_xsub_eval;
sub set_errno;
sub ticks_for_usleep;
}
package Devel::NYTProf::Util {
sub trace_level;
}
package Devel::OverloadInfo {
sub blessed($) ;
}
package Devel::Peek {
sub CvGV;
sub DeadCode;
sub Dump;
sub DumpArray;
sub DumpProg;
sub SvREFCNT(\[$@%&*]) ;
sub fill_mstats;
sub mstat;
sub mstats2hash($\%;$) ;
sub mstats_fillhash(\%;$) ;
sub runops_debug;
}
package Devel::Size {
sub size;
sub total_size;
}
package Digest::MD5 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub context;
sub digest;
sub hexdigest;
sub md5;
sub md5_base64;
sub md5_hex;
sub new;
sub reset;
}
package Digest::SHA {
sub DESTROY($) ;
sub _addfilebin($$) ;
sub _addfileuniv($$) ;
sub _getstate($) ;
sub _putstate($$) ;
sub add($;@) ;
sub algorithm($) ;
sub b64digest($) ;
sub clone($) ;
sub digest($) ;
sub hashsize($) ;
sub hexdigest($) ;
sub hmac_sha1(;@) ;
sub hmac_sha1_base64(;@) ;
sub hmac_sha1_hex(;@) ;
sub hmac_sha224(;@) ;
sub hmac_sha224_base64(;@) ;
sub hmac_sha224_hex(;@) ;
sub hmac_sha256(;@) ;
sub hmac_sha256_base64(;@) ;
sub hmac_sha256_hex(;@) ;
sub hmac_sha384(;@) ;
sub hmac_sha384_base64(;@) ;
sub hmac_sha384_hex(;@) ;
sub hmac_sha512(;@) ;
sub hmac_sha512224(;@) ;
sub hmac_sha512224_base64(;@) ;
sub hmac_sha512224_hex(;@) ;
sub hmac_sha512256(;@) ;
sub hmac_sha512256_base64(;@) ;
sub hmac_sha512256_hex(;@) ;
sub hmac_sha512_base64(;@) ;
sub hmac_sha512_hex(;@) ;
sub newSHA($$) ;
sub sha1(;@) ;
sub sha1_base64(;@) ;
sub sha1_hex(;@) ;
sub sha224(;@) ;
sub sha224_base64(;@) ;
sub sha224_hex(;@) ;
sub sha256(;@) ;
sub sha256_base64(;@) ;
sub sha256_hex(;@) ;
sub sha384(;@) ;
sub sha384_base64(;@) ;
sub sha384_hex(;@) ;
sub sha512(;@) ;
sub sha512224(;@) ;
sub sha512224_base64(;@) ;
sub sha512224_hex(;@) ;
sub sha512256(;@) ;
sub sha512256_base64(;@) ;
sub sha512256_hex(;@) ;
sub sha512_base64(;@) ;
sub sha512_hex(;@) ;
sub shainit($$) ;
sub sharewind($) ;
sub shawrite($$$) ;
}
package Digest::SHA1 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub new;
sub sha1;
sub sha1_base64;
sub sha1_hex;
sub sha1_transform;
}
package Digest::base {
sub add;
sub clone;
sub digest;
sub new;
}
package DynaLoader {
sub CLONE;
sub boot_DynaLoader;
sub dl_error;
sub dl_find_symbol;
sub dl_install_xsub;
sub dl_load_file;
sub dl_undef_symbols;
sub dl_unload_file;
}
package Encode {
sub _bytes_to_utf8($;@) ;
sub _utf8_off($) ;
sub _utf8_on($) ;
sub _utf8_to_bytes($;@) ;
sub is_utf8($;$) ;
}
package Encode::Unicode {
sub decode;
sub decode_xs;
sub encode;
sub encode_xs;
}
package Encode::XS {
sub cat_decode($$$$$;$) ;
sub decode($$;$) ;
sub encode($$;$) ;
sub mime_name($) ;
sub name($) ;
sub needs_lines($) ;
sub perlio_ok($) ;
sub renew($) ;
sub renewed($) ;
}
package Encode::utf8 {
sub decode;
sub decode_xs;
sub encode;
sub encode_xs;
}
package Eval::Closure {
sub reftype($) ;
}
package Fcntl {
sub AUTOLOAD;
sub DN_ACCESS() ;
sub DN_ATTRIB() ;
sub DN_CREATE() ;
sub DN_DELETE() ;
sub DN_MODIFY() ;
sub DN_MULTISHOT() ;
sub DN_RENAME() ;
sub FAPPEND() ;
sub FASYNC() ;
sub FCREAT() ;
sub FDEFER() ;
sub FDSYNC() ;
sub FD_CLOEXEC() ;
sub FEXCL() ;
sub FLARGEFILE() ;
sub FNDELAY() ;
sub FNONBLOCK() ;
sub FRSYNC() ;
sub FSYNC() ;
sub FTRUNC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_DUPFD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLEASE() ;
sub F_GETLK() ;
sub F_GETLK64() ;
sub F_GETOWN() ;
sub F_GETPIPE_SZ() ;
sub F_GETSIG() ;
sub F_NODNY() ;
sub F_NOTIFY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RDLCK() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLEASE() ;
sub F_SETLK() ;
sub F_SETLK64() ;
sub F_SETLKW() ;
sub F_SETLKW64() ;
sub F_SETOWN() ;
sub F_SETPIPE_SZ() ;
sub F_SETSIG() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub F_WRLCK() ;
sub LOCK_MAND() ;
sub LOCK_READ() ;
sub LOCK_RW() ;
sub LOCK_WRITE() ;
sub O_ALIAS() ;
sub O_ALT_IO() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EVTONLY() ;
sub O_EXLOCK() ;
sub O_IGNORE_CTTY() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOATIME() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NOLINK() ;
sub O_NONBLOCK() ;
sub O_NOSIGPIPE() ;
sub O_NOTRANS() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYMLINK() ;
sub O_SYNC() ;
sub O_TTY_INIT() ;
sub S_ENFMT() ;
sub S_IFLNK() ;
sub S_IFMT;
sub S_IFSOCK() ;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub S_ISTXT() ;
sub S_ISVTX() ;
}
package File::DosGlob {
sub _callsite;
}
package File::Find {
sub is_tainted($) ;
}
package File::Glob {
sub AUTOLOAD;
sub CLONE;
sub GLOB_ERROR;
sub bsd_glob;
sub bsd_glob_override;
sub csh_glob;
}
package File::Spec::Unix {
sub _fn_canonpath;
sub _fn_catdir;
sub _fn_catfile;
sub canonpath;
sub catdir;
sub catfile;
}
package FileHandle {
sub clearerr;
sub error;
sub flush;
sub getpos;
sub new_tmpfile;
sub setbuf;
sub setpos;
sub setvbuf;
sub ungetc;
}
package Filter::Util::Call {
sub filter_del() ;
sub filter_read(;$) ;
sub real_import($$$) ;
sub unimport(;$@) ;
}
package Filter::Util::Exec {
sub filter_add($@) ;
}
package Filter::decrypt {
sub import;
sub unimport;
}
package Filter::tee {
sub import;
}
package GD {
sub constant;
}
package GD::Font {
sub DESTROY($) ;
sub Giant($) ;
sub Large($) ;
sub MediumBold($) ;
sub Small($) ;
sub Tiny($) ;
sub height($) ;
sub load($$) ;
sub nchars($) ;
sub offset($) ;
sub width($) ;
}
package GD::Image {
sub DESTROY($) ;
sub STORABLE_freeze($$) ;
sub STORABLE_thaw;
sub _new($;$$$) ;
sub _newFromGd($$) ;
sub _newFromGd2($$) ;
sub _newFromGd2Part($$$$$$) ;
sub _newFromGif($$;$) ;
sub _newFromJpeg($$;$) ;
sub _newFromPng($$;$) ;
sub _newFromWBMP($$) ;
sub _newFromXbm($$) ;
sub alphaBlending($$) ;
sub arc($$$$$$$$) ;
sub boundsSafe($$$) ;
sub char($$$$$$) ;
sub charUp($$$$$$) ;
sub clip($;$$$$) ;
sub colorAllocate($$$$) ;
sub colorAllocateAlpha($$$$) ;
sub colorClosest($$$$) ;
sub colorClosestAlpha($$$$) ;
sub colorClosestHWB($$$$) ;
sub colorDeallocate($$) ;
sub colorExact($$$$) ;
sub colorExactAlpha($$$$) ;
sub colorResolve($$$$) ;
sub colorResolveAlpha($$$$) ;
sub colorsTotal($) ;
sub compare($$) ;
sub copy($$$$$$$$) ;
sub copyFlipHorizontal($) ;
sub copyFlipVertical($) ;
sub copyMerge($$$$$$$$$) ;
sub copyMergeGray($$$$$$$$$) ;
sub copyResampled($$$$$$$$$$) ;
sub copyResized($$$$$$$$$$) ;
sub copyReverseTranspose($) ;
sub copyRotate180($) ;
sub copyRotate270($) ;
sub copyRotate90($) ;
sub copyRotated($$$$$$$$$) ;
sub copyTranspose($) ;
sub dashedLine($$$$$$) ;
sub fill($$$$) ;
sub fillToBorder($$$$$) ;
sub filledArc($$$$$$$$$) ;
sub filledEllipse($$$$$$) ;
sub filledPolygon($$$) ;
sub filledRectangle($$$$$$) ;
sub flipHorizontal($) ;
sub flipVertical($) ;
sub gd($) ;
sub gd2($) ;
sub getBounds($) ;
sub getPixel($$$) ;
sub gif($) ;
sub gifanimadd($$$$$$$) ;
sub gifanimbegin($$$) ;
sub gifanimend($) ;
sub interlaced($;$) ;
sub isTrueColor($) ;
sub jpeg($) ;
sub line($$$$$$) ;
sub newFromGd2Data($$) ;
sub newFromGdData($$) ;
sub newFromGifData($$;$) ;
sub newFromJpegData($$;$) ;
sub newFromPngData($$;$) ;
sub newFromWBMPData($$;$) ;
sub openPolygon($$$) ;
sub paletteCopy($$) ;
sub png($;$) ;
sub rectangle($$$$$$) ;
sub rgb($$) ;
sub rotate180($) ;
sub saveAlpha($$) ;
sub setAntiAliased($$) ;
sub setAntiAliasedDontBlend($$$) ;
sub setBrush($$) ;
sub setPixel($$$$) ;
sub setStyle($;$) ;
sub setThickness($$) ;
sub setTile($$) ;
sub string($$$$$$) ;
sub stringFT($$$$$$$$;$) ;
sub stringFTCircle($$$$$$$$$$$) ;
sub stringTTF($$$$$$$$;$) ;
sub stringUp($$$$$$) ;
sub transparent($;$) ;
sub trueColor($$) ;
sub trueColorToPalette($;$$) ;
sub unclosedPolygon($$$) ;
sub useFontConfig($$) ;
sub wbmp($) ;
}
package HTML::Entities {
sub UNICODE_SUPPORT() ;
sub _decode_entities;
sub _probably_utf8_chunk;
sub decode;
sub decode_entities;
}
package HTML::Parser {
sub _alloc_pstate;
sub attr_encoded;
sub backquote;
sub boolean_attribute_value;
sub case_sensitive;
sub closing_plaintext;
sub empty_element_tags;
sub eof;
sub handler;
sub ignore_elements;
sub ignore_tags;
sub marked_sections;
sub parse;
sub report_tags;
sub strict_comment;
sub strict_end;
sub strict_names;
sub unbroken_text;
sub utf8_mode;
sub xml_mode;
sub xml_pic;
}
package Hash::Util {
sub all_keys(\%\@\@) ;
sub bucket_array;
sub bucket_info;
sub hash_seed() ;
sub hash_traversal_mask;
sub hash_value($;$) ;
sub hidden_ref_keys;
sub hv_store(\%$$) ;
sub legal_ref_keys;
sub reftype($) ;
}
package Hash::Util::FieldHash {
sub CLONE;
sub _active_fields;
sub _fieldhash($$) ;
sub _test_uvar_get;
sub _test_uvar_same;
sub _test_uvar_set;
sub id($) ;
sub id_2obj($) ;
sub reftype($) ;
sub register($@) ;
}
package IO::File {
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub new_tmpfile;
}
package IO::Handle {
sub _create_getline_subs;
sub blocking($;$) ;
sub clearerr;
sub error;
sub flush;
sub setbuf;
sub setvbuf;
sub sync;
sub ungetc;
sub untaint;
}
package IO::Poll {
sub _poll;
}
package IO::Seekable {
sub getpos;
sub setpos;
}
package IO::Socket {
sub sockatmark($) ;
}
package Internals {
sub SvREADONLY(\[$%@];$) ;
sub SvREFCNT(\[$%@];$) ;
sub V;
sub hv_clear_placeholders(\%) ;
}
package List::MoreUtils {
sub _XScompiled;
sub _array_iterator(;$) ;
sub _natatime_iterator() ;
sub after(&@) ;
sub after_incl(&@) ;
sub all(&@) ;
sub all_u(&@) ;
sub any(&@) ;
sub any_u(&@) ;
sub apply(&@) ;
sub before(&@) ;
sub before_incl(&@) ;
sub bsearch(&@) ;
sub bsearch_index(&@) ;
sub bsearchidx(&@) ;
sub distinct(@) ;
sub each_array(\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub each_arrayref;
sub false(&@) ;
sub first_index(&@) ;
sub first_result(&@) ;
sub first_value(&@) ;
sub firstidx(&@) ;
sub firstres(&@) ;
sub firstval(&@) ;
sub indexes(&@) ;
sub insert_after(&$\@) ;
sub insert_after_string($$\@) ;
sub last_index(&@) ;
sub last_result(&@) ;
sub last_value(&@) ;
sub lastidx(&@) ;
sub lastres(&@) ;
sub lastval(&@) ;
sub mesh(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub minmax(@) ;
sub natatime($@) ;
sub none(&@) ;
sub none_u(&@) ;
sub notall(&@) ;
sub notall_u(&@) ;
sub one(&@) ;
sub one_u(&@) ;
sub only_index(&@) ;
sub only_result(&@) ;
sub only_value(&@) ;
sub onlyidx(&@) ;
sub onlyres(&@) ;
sub onlyval(&@) ;
sub pairwise(&\@\@) ;
sub part(&@) ;
sub singleton(@) ;
sub true(&@) ;
sub uniq(@) ;
sub zip(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
}
package List::MoreUtils_ea {
sub DESTROY;
}
package List::MoreUtils_na {
sub DESTROY;
}
package List::Util {
sub all(&@) ;
sub any(&@) ;
sub first(&@) ;
sub max(@) ;
sub maxstr(@) ;
sub min(@) ;
sub minstr(@) ;
sub none(&@) ;
sub notall(&@) ;
sub pairfirst(&@) ;
sub pairgrep(&@) ;
sub pairkeys(@) ;
sub pairmap(&@) ;
sub pairs(@) ;
sub pairvalues(@) ;
sub product(@) ;
sub reduce(&@) ;
sub shuffle(@) ;
sub sum(@) ;
sub sum0(@) ;
sub uniq(@) ;
sub uniqnum(@) ;
sub uniqstr(@) ;
sub unpairs(@) ;
}
package MIME::Base64 {
sub decode($) ;
sub decode_base64($) ;
sub decoded_base64_length($) ;
sub encode($;$) ;
sub encode_base64($;$) ;
sub encoded_base64_length($;$) ;
}
package MIME::QuotedPrint {
sub decode_qp($) ;
sub encode_qp($;$$) ;
}
package Math::BigInt::FastCalc {
sub __strip_zeros;
sub _acmp;
sub _copy;
sub _dec;
sub _inc;
sub _is_even;
sub _is_odd;
sub _is_one;
sub _is_ten;
sub _is_two;
sub _is_zero;
sub _len;
sub _new;
sub _one;
sub _ten;
sub _two;
sub _zero;
}
package Math::BigInt::GMP {
sub DESTROY($) ;
sub _1ex($$) ;
sub _acmp($$$) ;
sub _add($$$) ;
sub _alen($$) ;
sub _and($$$) ;
sub _as_bin($$) ;
sub _as_hex($$) ;
sub _as_oct($$) ;
sub _copy($$) ;
sub _dec($$) ;
sub _div($$$) ;
sub _fac($$) ;
sub _from_bin($$) ;
sub _from_hex($$) ;
sub _from_oct($$) ;
sub _gcd($$$) ;
sub _inc($$) ;
sub _is_even($$) ;
sub _is_odd($$) ;
sub _is_one($$) ;
sub _is_ten($$) ;
sub _is_two($$) ;
sub _is_zero($$) ;
sub _len($$) ;
sub _lsft($$$$) ;
sub _mod($$$) ;
sub _modinv($$$) ;
sub _modpow($$$$) ;
sub _mul($$$) ;
sub _new($$) ;
sub _new_attach($$$) ;
sub _one($) ;
sub _or($$$) ;
sub _pow($$$) ;
sub _root($$$) ;
sub _rsft($$$$) ;
sub _set($$$) ;
sub _sqrt($$) ;
sub _str($$) ;
sub _sub($$$;@) ;
sub _ten($) ;
sub _two($) ;
sub _xor($$$) ;
sub _zero($) ;
sub _zeros($$) ;
}
package Math::Prime::Util {
sub CLONE(;@) ;
sub Pi(;$) ;
sub _XS_ExponentialIntegral($) ;
sub _XS_LMOS_pi($) ;
sub _XS_LMO_pi($) ;
sub _XS_LambertW($) ;
sub _XS_LogarithmicIntegral($) ;
sub _XS_RiemannR($) ;
sub _XS_RiemannZeta($) ;
sub _XS_get_callgmp() ;
sub _XS_get_verbose() ;
sub _XS_legendre_pi($) ;
sub _XS_lehmer_pi($) ;
sub _XS_meissel_pi($) ;
sub _XS_segment_pi($;@) ;
sub _XS_set_callgmp($) ;
sub _XS_set_verbose($) ;
sub _get_prime_cache_size() ;
sub _n_ramanujan_primes($$) ;
sub _pidigits($) ;
sub _ramanujan_primes($$) ;
sub _validate_num($;@) ;
sub addmod($$$) ;
sub binomial($$) ;
sub carmichael_lambda($) ;
sub chebyshev_psi($) ;
sub chebyshev_theta($) ;
sub chinese(@) ;
sub divisor_sum($;@) ;
sub divisors($) ;
sub divmod($$$) ;
sub ecm_factor($;@) ;
sub erat_primes($$) ;
sub euler_phi($;@) ;
sub exp_mangoldt($) ;
sub factor($) ;
sub factor_exp($) ;
sub factorial($) ;
sub fermat_factor($;@) ;
sub forcomb(&$;$) ;
sub forcomp(&$;$) ;
sub forcomposites(&$;$) ;
sub fordivisors(&$) ;
sub foroddcomposites(&$;$) ;
sub forpart(&$;$) ;
sub forperm(&$;$) ;
sub forprimes(&$;$) ;
sub fromdigits($;$$) ;
sub gcd(@) ;
sub gcdext($$) ;
sub hammingweight($) ;
sub hclassno($) ;
sub holf_factor($;@) ;
sub inverse_li($) ;
sub invmod($$) ;
sub is_aks_prime($;@) ;
sub is_almost_extra_strong_lucas_pseudoprime($;@) ;
sub is_bpsw_prime($;@) ;
sub is_carmichael($;@) ;
sub is_catalan_pseudoprime($;@) ;
sub is_euler_plumb_pseudoprime($;@) ;
sub is_euler_pseudoprime($;@) ;
sub is_extra_strong_lucas_pseudoprime($;@) ;
sub is_frobenius_khashin_pseudoprime($;@) ;
sub is_frobenius_pseudoprime($;@) ;
sub is_frobenius_underwood_pseudoprime($;@) ;
sub is_lucas_pseudoprime($;@) ;
sub is_mersenne_prime($;@) ;
sub is_perrin_pseudoprime($;@) ;
sub is_pillai($;@) ;
sub is_power($;@) ;
sub is_prime($;@) ;
sub is_prime_power($;@) ;
sub is_primitive_root($;@) ;
sub is_prob_prime($;@) ;
sub is_provable_prime($;@) ;
sub is_pseudoprime($;@) ;
sub is_quasi_carmichael($;@) ;
sub is_ramanujan_prime($;@) ;
sub is_semiprime($;@) ;
sub is_square_free($;@) ;
sub is_strong_lucas_pseudoprime($;@) ;
sub is_strong_pseudoprime($;@) ;
sub jordan_totient($$) ;
sub kronecker($$) ;
sub lcm(@) ;
sub legendre_phi($$) ;
sub liouville($) ;
sub logint($;@) ;
sub lucas_sequence(;@) ;
sub lucasu(;@) ;
sub lucasv(;@) ;
sub mertens($) ;
sub moebius($;@) ;
sub mulmod($$$) ;
sub next_prime($) ;
sub nth_prime($) ;
sub nth_prime_approx($) ;
sub nth_prime_lower($) ;
sub nth_prime_upper($) ;
sub nth_ramanujan_prime($) ;
sub nth_twin_prime($) ;
sub nth_twin_prime_approx($) ;
sub pbrent_factor($;@) ;
sub pminus1_factor($;@) ;
sub powmod($$$) ;
sub pplus1_factor($;@) ;
sub prev_prime($) ;
sub prho_factor($;@) ;
sub prime_count($;@) ;
sub prime_count_approx($) ;
sub prime_count_lower($) ;
sub prime_count_upper($) ;
sub prime_memfree() ;
sub prime_precalc($) ;
sub print_primes($;@) ;
sub ramanujan_prime_count($;@) ;
sub ramanujan_sum($$) ;
sub ramanujan_tau($) ;
sub rootint($;@) ;
sub segment_primes($$) ;
sub segment_twin_primes($$) ;
sub sieve_prime_cluster($$;@) ;
sub sieve_primes($$) ;
sub sieve_range($$$) ;
sub sqrtint($) ;
sub sqrtmod($$) ;
sub squfof_factor($;@) ;
sub stirling($$;$) ;
sub sum_primes($;@) ;
sub sumdigits($;$) ;
sub todigits($;$$) ;
sub todigitstring($;$$) ;
sub trial_factor($;@) ;
sub trial_primes($$) ;
sub twin_prime_count($;@) ;
sub twin_prime_count_approx($) ;
sub valuation($$) ;
sub vecall(&@) ;
sub vecany(&@) ;
sub vecextract($$) ;
sub vecfirst(&@) ;
sub vecfirstidx(&@) ;
sub vecmax(@) ;
sub vecmin(@) ;
sub vecnone(&@) ;
sub vecnotall(&@) ;
sub vecprod(@) ;
sub vecreduce(&@) ;
sub vecsum(@) ;
sub znlog($$$) ;
sub znorder($$) ;
sub znprimroot($) ;
}
package Math::Prime::Util::GMP {
sub Pi($) ;
sub _GMP_destroy() ;
sub _GMP_init() ;
sub _GMP_set_verbose($) ;
sub _is_provable_prime($;$) ;
sub _validate_ecpp_curve($$$$$$$) ;
sub addmod($$$) ;
sub bernfrac($) ;
sub bernreal($;$) ;
sub binomial($$) ;
sub carmichael_lambda($) ;
sub chinese(@) ;
sub consecutive_integer_lcm($) ;
sub divisors($) ;
sub divmod($$$) ;
sub ecm_factor($;@) ;
sub exp_mangoldt($) ;
sub factor($) ;
sub factorial($) ;
sub gcd(@) ;
sub gcdext($$) ;
sub harmfrac($) ;
sub harmreal($;$) ;
sub holf_factor($;@) ;
sub invmod($$) ;
sub is_aks_prime($) ;
sub is_almost_extra_strong_lucas_pseudoprime($;$) ;
sub is_bls75_prime($) ;
sub is_bpsw_prime($) ;
sub is_ecpp_prime($) ;
sub is_euler_plumb_pseudoprime($) ;
sub is_euler_pseudoprime($;@) ;
sub is_extra_strong_lucas_pseudoprime($) ;
sub is_frobenius_khashin_pseudoprime($) ;
sub is_frobenius_pseudoprime($;$$) ;
sub is_frobenius_underwood_pseudoprime($) ;
sub is_llr_prime($) ;
sub is_lucas_pseudoprime($) ;
sub is_mersenne_prime($) ;
sub is_miller_prime($;$) ;
sub is_nminus1_prime($) ;
sub is_nplus1_prime($) ;
sub is_perrin_pseudoprime($;$) ;
sub is_power($;$) ;
sub is_prime($) ;
sub is_prime_power($) ;
sub is_primitive_root($$) ;
sub is_prob_prime($) ;
sub is_proth_prime($) ;
sub is_pseudoprime($;@) ;
sub is_strong_lucas_pseudoprime($) ;
sub is_strong_pseudoprime($;@) ;
sub jordan_totient($$) ;
sub kronecker($$) ;
sub lcm(@) ;
sub liouville($) ;
sub lucas_sequence($$$$) ;
sub lucasu($$$) ;
sub lucasv($$$) ;
sub miller_rabin_random($$;$) ;
sub moebius($;$) ;
sub mulmod($$$) ;
sub next_prime($) ;
sub partitions($) ;
sub pbrent_factor($;@) ;
sub pminus1_factor($;@) ;
sub pn_primorial($) ;
sub powmod($$$) ;
sub pplus1_factor($;@) ;
sub prev_prime($) ;
sub prho_factor($;@) ;
sub prime_count($$) ;
sub primorial($) ;
sub qs_factor($;@) ;
sub ramanujan_tau($) ;
sub riemannr($;$) ;
sub rootint($$) ;
sub sieve_prime_cluster($$;@) ;
sub sieve_primes($$;@) ;
sub sieve_range($$$) ;
sub sieve_twin_primes($$;@) ;
sub sigma($;$) ;
sub sqrtint($) ;
sub sqrtmod($$) ;
sub squfof_factor($;@) ;
sub stirling($$;$) ;
sub surround_primes($;$) ;
sub todigits($;$$) ;
sub totient($) ;
sub trial_factor($;@) ;
sub valuation($$) ;
sub vecprod(@) ;
sub vecsum(@) ;
sub zeta($;$) ;
sub znorder($$) ;
sub znprimroot($) ;
}
package Moose {
sub is_class_loaded;
}
package Moose::Exporter {
sub _export_is_flagged;
sub _flag_as_reexport;
sub is_class_loaded;
sub reftype($) ;
sub subname;
sub uniq(@) ;
}
package Moose::Meta::Attribute {
sub any(&@) ;
sub blessed($) ;
}
package Moose::Meta::Class {
sub any(&@) ;
sub blessed($) ;
}
package Moose::Meta::Class::Immutable::Trait {
sub blessed($) ;
}
package Moose::Meta::Method::Constructor {
sub weaken($) ;
}
package Moose::Meta::Method::Delegation {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Method::Destructor {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Object::Trait {
sub blessed($) ;
}
package Moose::Meta::Role {
sub blessed($) ;
}
package Moose::Meta::Role::Application {
sub all(&@) ;
}
package Moose::Meta::Role::Application::RoleSummation {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::Role::Application::ToClass {
sub first(&@) ;
sub weaken($) ;
}
package Moose::Meta::Role::Application::ToInstance {
sub _reset_amagic;
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::Role::Attribute {
sub all(&@) ;
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Role::Composite {
sub blessed($) ;
}
package Moose::Meta::TypeCoercion::Union {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint {
sub refaddr($) ;
sub subname;
}
package Moose::Meta::TypeConstraint::DuckType {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Parameterized {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Registry {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Union {
sub all(&@) ;
sub first(&@) ;
}
package Moose::Util {
sub _STRING($) ;
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::MetaRole {
sub all(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::TypeConstraints {
sub blessed($) ;
}
package Moose::Util::TypeConstraints::Builtins {
sub _RegexpRef;
sub blessed($) ;
sub is_class_loaded;
}
package Net::SSLeay {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub ASN1_INTEGER_free($) ;
sub ASN1_INTEGER_get($) ;
sub ASN1_INTEGER_new() ;
sub ASN1_INTEGER_set($$) ;
sub ASN1_TIME_free($) ;
sub ASN1_TIME_new() ;
sub ASN1_TIME_set($$) ;
sub ASN1_TIME_timet($) ;
sub BIO_eof($) ;
sub BIO_f_ssl() ;
sub BIO_free($) ;
sub BIO_new($) ;
sub BIO_new_buffer_ssl_connect($) ;
sub BIO_new_file($$) ;
sub BIO_new_ssl($$) ;
sub BIO_new_ssl_connect($) ;
sub BIO_pending($) ;
sub BIO_read($;$) ;
sub BIO_s_mem() ;
sub BIO_ssl_copy_session_id($$) ;
sub BIO_ssl_shutdown($) ;
sub BIO_wpending($) ;
sub BIO_write($$) ;
sub CIPHER_description($$$) ;
sub CIPHER_get_bits($;$) ;
sub CIPHER_get_name($) ;
sub CLONE(;@) ;
sub COMP_add_compression_method($$) ;
sub CTX_add_client_CA($$) ;
sub CTX_add_extra_chain_cert($$) ;
sub CTX_add_session($$) ;
sub CTX_callback_ctrl($$$) ;
sub CTX_check_private_key($) ;
sub CTX_ctrl($$$$) ;
sub CTX_flush_sessions($$) ;
sub CTX_free($) ;
sub CTX_get_app_data($) ;
sub CTX_get_cert_store($) ;
sub CTX_get_client_CA_list($) ;
sub CTX_get_ex_data($$) ;
sub CTX_get_ex_new_index($$$$$) ;
sub CTX_get_mode($) ;
sub CTX_get_options($) ;
sub CTX_get_quiet_shutdown($) ;
sub CTX_get_read_ahead($) ;
sub CTX_get_session_cache_mode($) ;
sub CTX_get_timeout($) ;
sub CTX_get_verify_depth($) ;
sub CTX_get_verify_mode($) ;
sub CTX_load_verify_locations($$$) ;
sub CTX_need_tmp_RSA($) ;
sub CTX_new() ;
sub CTX_new_with_method($) ;
sub CTX_remove_session($$) ;
sub CTX_sess_accept($) ;
sub CTX_sess_accept_good($) ;
sub CTX_sess_accept_renegotiate($) ;
sub CTX_sess_cache_full($) ;
sub CTX_sess_cb_hits($) ;
sub CTX_sess_connect($) ;
sub CTX_sess_connect_good($) ;
sub CTX_sess_connect_renegotiate($) ;
sub CTX_sess_get_cache_size($) ;
sub CTX_sess_hits($) ;
sub CTX_sess_misses($) ;
sub CTX_sess_number($) ;
sub CTX_sess_set_cache_size($$) ;
sub CTX_sess_timeouts($) ;
sub CTX_sessions($) ;
sub CTX_set1_param($$) ;
sub CTX_set_alpn_protos($;$) ;
sub CTX_set_alpn_select_cb($$;$) ;
sub CTX_set_app_data($$) ;
sub CTX_set_cert_store($$) ;
sub CTX_set_cert_verify_callback($$;$) ;
sub CTX_set_cipher_list($$) ;
sub CTX_set_client_CA_list($$) ;
sub CTX_set_default_passwd_cb($;$) ;
sub CTX_set_default_passwd_cb_userdata($;$) ;
sub CTX_set_default_verify_paths($) ;
sub CTX_set_ex_data($$$) ;
sub CTX_set_info_callback($$;$) ;
sub CTX_set_mode($$) ;
sub CTX_set_next_proto_select_cb($$;$) ;
sub CTX_set_next_protos_advertised_cb($$;$) ;
sub CTX_set_options($$) ;
sub CTX_set_purpose($$) ;
sub CTX_set_quiet_shutdown($$) ;
sub CTX_set_read_ahead($$) ;
sub CTX_set_session_cache_mode($$) ;
sub CTX_set_session_id_context($$$) ;
sub CTX_set_ssl_version($$) ;
sub CTX_set_timeout($$) ;
sub CTX_set_tlsext_servername_callback($;$$) ;
sub CTX_set_tlsext_status_cb($$;$) ;
sub CTX_set_tlsext_ticket_getkey_cb($;$$) ;
sub CTX_set_tmp_dh($$) ;
sub CTX_set_tmp_dh_callback($$) ;
sub CTX_set_tmp_ecdh($$) ;
sub CTX_set_tmp_rsa($$) ;
sub CTX_set_tmp_rsa_callback($$) ;
sub CTX_set_trust($$) ;
sub CTX_set_verify($$;$) ;
sub CTX_set_verify_depth($$) ;
sub CTX_tlsv1_1_new() ;
sub CTX_tlsv1_2_new() ;
sub CTX_tlsv1_new() ;
sub CTX_use_PKCS12_file($$;$) ;
sub CTX_use_PrivateKey($$) ;
sub CTX_use_PrivateKey_file($$$) ;
sub CTX_use_RSAPrivateKey($$) ;
sub CTX_use_RSAPrivateKey_file($$$) ;
sub CTX_use_certificate($$) ;
sub CTX_use_certificate_chain_file($$) ;
sub CTX_use_certificate_file($$$) ;
sub CTX_v23_new() ;
sub CTX_v3_new() ;
sub DH_free($) ;
sub EC_KEY_free($) ;
sub EC_KEY_generate_key($) ;
sub EC_KEY_new_by_curve_name($) ;
sub ENGINE_by_id($) ;
sub ENGINE_load_builtin_engines() ;
sub ENGINE_register_all_complete() ;
sub ENGINE_set_default($$) ;
sub ERR_clear_error() ;
sub ERR_error_string($;$) ;
sub ERR_get_error() ;
sub ERR_load_RAND_strings() ;
sub ERR_load_SSL_strings() ;
sub ERR_load_crypto_strings() ;
sub ERR_peek_error() ;
sub ERR_put_error($$$$$) ;
sub EVP_Digest(;@) ;
sub EVP_DigestFinal($) ;
sub EVP_DigestFinal_ex($) ;
sub EVP_DigestInit($$) ;
sub EVP_DigestInit_ex($$$) ;
sub EVP_DigestUpdate($$) ;
sub EVP_MD_CTX_create() ;
sub EVP_MD_CTX_destroy($) ;
sub EVP_MD_CTX_md($) ;
sub EVP_MD_size($) ;
sub EVP_MD_type($) ;
sub EVP_PKEY_assign_EC_KEY($$) ;
sub EVP_PKEY_assign_RSA($$) ;
sub EVP_PKEY_bits($) ;
sub EVP_PKEY_copy_parameters($$) ;
sub EVP_PKEY_free($) ;
sub EVP_PKEY_id($) ;
sub EVP_PKEY_new() ;
sub EVP_PKEY_size($) ;
sub EVP_add_digest($) ;
sub EVP_get_cipherbyname($) ;
sub EVP_get_digestbyname($) ;
sub EVP_sha1() ;
sub EVP_sha256() ;
sub EVP_sha512() ;
sub FIPS_mode_set($) ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MD4($) ;
sub MD5($) ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub OBJ_cmp($$) ;
sub OBJ_dup($) ;
sub OBJ_ln2nid($) ;
sub OBJ_nid2ln($) ;
sub OBJ_nid2obj($) ;
sub OBJ_nid2sn($) ;
sub OBJ_obj2nid($) ;
sub OBJ_obj2txt($;$) ;
sub OBJ_sn2nid($) ;
sub OBJ_txt2nid($) ;
sub OBJ_txt2obj($;$) ;
sub OCSP_REQUEST_free($) ;
sub OCSP_RESPONSE_free($) ;
sub OCSP_cert2ids($;@) ;
sub OCSP_ids2req(;@) ;
sub OCSP_response_results($;@) ;
sub OCSP_response_status($) ;
sub OCSP_response_status_str($) ;
sub OCSP_response_verify($$;$$) ;
sub OPENSSL_add_all_algorithms_conf() ;
sub OPENSSL_add_all_algorithms_noconf() ;
sub OpenSSL_add_all_algorithms() ;
sub OpenSSL_add_all_digests() ;
sub OpenSSL_add_ssl_algorithms() ;
sub PEM_get_string_PrivateKey($;$$) ;
sub PEM_get_string_X509($) ;
sub PEM_get_string_X509_CRL($) ;
sub PEM_get_string_X509_REQ($) ;
sub PEM_read_bio_DHparams($;$$$) ;
sub PEM_read_bio_PrivateKey($;$$) ;
sub PEM_read_bio_X509($;$$$) ;
sub PEM_read_bio_X509_CRL($;$$$) ;
sub PEM_read_bio_X509_REQ($;$$$) ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub P_ASN1_INTEGER_get_dec($) ;
sub P_ASN1_INTEGER_get_hex($) ;
sub P_ASN1_INTEGER_set_dec($$) ;
sub P_ASN1_INTEGER_set_hex($$) ;
sub P_ASN1_STRING_get($;$) ;
sub P_ASN1_TIME_get_isotime($) ;
sub P_ASN1_TIME_put2string($) ;
sub P_ASN1_TIME_set_isotime($$) ;
sub P_ASN1_UTCTIME_put2string($) ;
sub P_EVP_MD_list_all() ;
sub P_PKCS12_load_file($;$$) ;
sub P_X509_CRL_add_revoked_serial_hex($$$;$$) ;
sub P_X509_CRL_get_serial($) ;
sub P_X509_CRL_set_serial($$) ;
sub P_X509_REQ_add_extensions($;@) ;
sub P_X509_REQ_get_attr($$) ;
sub P_X509_add_extensions($$;@) ;
sub P_X509_copy_extensions($$;$) ;
sub P_X509_get_crl_distribution_points($) ;
sub P_X509_get_ext_key_usage($;$) ;
sub P_X509_get_key_usage($) ;
sub P_X509_get_netscape_cert_type($) ;
sub P_X509_get_ocsp_uri($) ;
sub P_X509_get_pubkey_alg($) ;
sub P_X509_get_signature_alg($) ;
sub P_alpn_selected($) ;
sub P_next_proto_last_status($) ;
sub P_next_proto_negotiated($) ;
sub RAND_add($$$) ;
sub RAND_bytes($$) ;
sub RAND_cleanup() ;
sub RAND_file_name($) ;
sub RAND_load_file($$) ;
sub RAND_poll() ;
sub RAND_pseudo_bytes($$) ;
sub RAND_seed($) ;
sub RAND_status() ;
sub RAND_write_file($) ;
sub RIPEMD160($) ;
sub RSA_free($) ;
sub RSA_generate_key($$;$$) ;
sub RSA_get_key_parameters($) ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SESSION_free($) ;
sub SESSION_get_app_data($) ;
sub SESSION_get_ex_data($$) ;
sub SESSION_get_ex_new_index($$$$$) ;
sub SESSION_get_master_key($) ;
sub SESSION_get_time($) ;
sub SESSION_get_timeout($) ;
sub SESSION_new() ;
sub SESSION_print($$) ;
sub SESSION_print_fp($$) ;
sub SESSION_set_app_data($$) ;
sub SESSION_set_ex_data($$$) ;
sub SESSION_set_master_key($$) ;
sub SESSION_set_time($$) ;
sub SESSION_set_timeout($$) ;
sub SHA1($) ;
sub SHA256($) ;
sub SHA512($) ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub SSL_get0_session($) ;
sub SSLeay() ;
sub SSLeay_add_ssl_algorithms() ;
sub SSLeay_version(;$) ;
sub TLSv1_1_method() ;
sub TLSv1_2_method() ;
sub TLSv1_method() ;
sub UIO_MAXIOV() ;
sub X509V3_EXT_d2i($) ;
sub X509V3_EXT_print($;$$) ;
sub X509_CRL_digest($$) ;
sub X509_CRL_free($) ;
sub X509_CRL_get_ext($$) ;
sub X509_CRL_get_ext_by_NID($$;$) ;
sub X509_CRL_get_ext_count($) ;
sub X509_CRL_get_issuer($) ;
sub X509_CRL_get_lastUpdate($) ;
sub X509_CRL_get_nextUpdate($) ;
sub X509_CRL_get_version($) ;
sub X509_CRL_new() ;
sub X509_CRL_set_issuer_name($$) ;
sub X509_CRL_set_lastUpdate($$) ;
sub X509_CRL_set_nextUpdate($$) ;
sub X509_CRL_set_version($$) ;
sub X509_CRL_sign($$$) ;
sub X509_CRL_sort($) ;
sub X509_CRL_verify($$) ;
sub X509_EXTENSION_get_critical($) ;
sub X509_EXTENSION_get_data($) ;
sub X509_EXTENSION_get_object($) ;
sub X509_NAME_ENTRY_get_data($) ;
sub X509_NAME_ENTRY_get_object($) ;
sub X509_NAME_add_entry_by_NID($$$$;$$) ;
sub X509_NAME_add_entry_by_OBJ($$$$;$$) ;
sub X509_NAME_add_entry_by_txt($$$$;$$) ;
sub X509_NAME_cmp($$) ;
sub X509_NAME_digest($$) ;
sub X509_NAME_entry_count($) ;
sub X509_NAME_get_entry($$) ;
sub X509_NAME_get_text_by_NID($$) ;
sub X509_NAME_hash($) ;
sub X509_NAME_new() ;
sub X509_NAME_oneline($) ;
sub X509_NAME_print_ex($;$$) ;
sub X509_REQ_add1_attr_by_NID($$$$) ;
sub X509_REQ_digest($$) ;
sub X509_REQ_free($) ;
sub X509_REQ_get_attr_by_NID($$;$) ;
sub X509_REQ_get_attr_by_OBJ($$;$) ;
sub X509_REQ_get_attr_count($) ;
sub X509_REQ_get_pubkey($) ;
sub X509_REQ_get_subject_name($) ;
sub X509_REQ_get_version($) ;
sub X509_REQ_new() ;
sub X509_REQ_set_pubkey($$) ;
sub X509_REQ_set_subject_name($$) ;
sub X509_REQ_set_version($$) ;
sub X509_REQ_sign($$$) ;
sub X509_REQ_verify($$) ;
sub X509_STORE_CTX_get_current_cert($) ;
sub X509_STORE_CTX_get_error($) ;
sub X509_STORE_CTX_get_error_depth($) ;
sub X509_STORE_CTX_get_ex_data($$) ;
sub X509_STORE_CTX_set_cert($$) ;
sub X509_STORE_CTX_set_error($$) ;
sub X509_STORE_CTX_set_ex_data($$$) ;
sub X509_STORE_add_cert($$) ;
sub X509_STORE_add_crl($$) ;
sub X509_STORE_set1_param($$) ;
sub X509_STORE_set_flags($$) ;
sub X509_STORE_set_purpose($$) ;
sub X509_STORE_set_trust($$) ;
sub X509_VERIFY_PARAM_add0_policy($$) ;
sub X509_VERIFY_PARAM_add0_table($) ;
sub X509_VERIFY_PARAM_clear_flags($$) ;
sub X509_VERIFY_PARAM_free($) ;
sub X509_VERIFY_PARAM_get_depth($) ;
sub X509_VERIFY_PARAM_get_flags($) ;
sub X509_VERIFY_PARAM_inherit($$) ;
sub X509_VERIFY_PARAM_lookup($) ;
sub X509_VERIFY_PARAM_new() ;
sub X509_VERIFY_PARAM_set1($$) ;
sub X509_VERIFY_PARAM_set1_name($$) ;
sub X509_VERIFY_PARAM_set1_policies($$) ;
sub X509_VERIFY_PARAM_set_depth($$) ;
sub X509_VERIFY_PARAM_set_flags($$) ;
sub X509_VERIFY_PARAM_set_purpose($$) ;
sub X509_VERIFY_PARAM_set_time($$) ;
sub X509_VERIFY_PARAM_set_trust($$) ;
sub X509_VERIFY_PARAM_table_cleanup() ;
sub X509_certificate_type($;$) ;
sub X509_check_email($$;$) ;
sub X509_check_host($$;$$) ;
sub X509_check_ip($$;$) ;
sub X509_check_ip_asc($$;$) ;
sub X509_digest($$) ;
sub X509_free($) ;
sub X509_get_X509_PUBKEY($) ;
sub X509_get_ext($$) ;
sub X509_get_ext_by_NID($$;$) ;
sub X509_get_ext_count($) ;
sub X509_get_fingerprint($$) ;
sub X509_get_issuer_name($) ;
sub X509_get_notAfter($) ;
sub X509_get_notBefore($) ;
sub X509_get_pubkey($) ;
sub X509_get_serialNumber($) ;
sub X509_get_subjectAltNames($) ;
sub X509_get_subject_name($) ;
sub X509_get_version($) ;
sub X509_gmtime_adj($$) ;
sub X509_issuer_and_serial_hash($) ;
sub X509_issuer_name_hash($) ;
sub X509_load_cert_crl_file($$$) ;
sub X509_load_cert_file($$$) ;
sub X509_load_crl_file($$$) ;
sub X509_new() ;
sub X509_policy_level_get0_node($$) ;
sub X509_policy_level_node_count($) ;
sub X509_policy_node_get0_parent($) ;
sub X509_policy_node_get0_policy($) ;
sub X509_policy_node_get0_qualifiers($) ;
sub X509_policy_tree_free($) ;
sub X509_policy_tree_get0_level($$) ;
sub X509_policy_tree_get0_policies($) ;
sub X509_policy_tree_get0_user_policies($) ;
sub X509_policy_tree_level_count($) ;
sub X509_pubkey_digest($$) ;
sub X509_set_issuer_name($$) ;
sub X509_set_pubkey($$) ;
sub X509_set_serialNumber($$) ;
sub X509_set_subject_name($$) ;
sub X509_set_version($$) ;
sub X509_sign($$$) ;
sub X509_subject_name_hash($) ;
sub X509_verify($$) ;
sub X509_verify_cert_error_string($) ;
sub accept($) ;
sub add_client_CA($$) ;
sub add_file_cert_subjects_to_stack($$) ;
sub add_ssl_algorithms() ;
sub alert_desc_string($) ;
sub alert_desc_string_long($) ;
sub alert_type_string($) ;
sub alert_type_string_long($) ;
sub callback_ctrl($$$) ;
sub check_private_key($) ;
sub clear($) ;
sub clear_num_renegotiations($) ;
sub connect($) ;
sub constant($) ;
sub copy_session_id($$) ;
sub ctrl($$$$) ;
sub d2i_OCSP_REQUEST($) ;
sub d2i_OCSP_RESPONSE($) ;
sub d2i_SSL_SESSION($$$) ;
sub d2i_X509_CRL_bio($;$) ;
sub d2i_X509_REQ_bio($;$) ;
sub d2i_X509_bio($;$) ;
sub debug_read;
sub do_handshake($) ;
sub do_https2;
sub do_https3;
sub do_https4;
sub do_https;
sub do_httpx2;
sub do_httpx3;
sub do_httpx4;
sub dump_peer_certificate($) ;
sub dup($) ;
sub export_keying_material($$$$) ;
sub free($) ;
sub get1_session($) ;
sub get_SSL_CTX($) ;
sub get_app_data($) ;
sub get_certificate($) ;
sub get_cipher($) ;
sub get_cipher_bits($;$) ;
sub get_cipher_list($$) ;
sub get_client_CA_list($) ;
sub get_client_random($) ;
sub get_current_cipher($) ;
sub get_default_timeout($) ;
sub get_error($$) ;
sub get_ex_data($$) ;
sub get_ex_new_index($$$$$) ;
sub get_fd($) ;
sub get_finished($$$) ;
sub get_http3;
sub get_http4;
sub get_http;
sub get_https3;
sub get_https4;
sub get_https;
sub get_httpx3;
sub get_httpx4;
sub get_httpx;
sub get_keyblock_size($) ;
sub get_mode($) ;
sub get_options($) ;
sub get_peer_cert_chain($) ;
sub get_peer_certificate($) ;
sub get_peer_finished($$$) ;
sub get_quiet_shutdown($) ;
sub get_rbio($) ;
sub get_read_ahead($) ;
sub get_server_random($) ;
sub get_servername($;$) ;
sub get_servername_type($) ;
sub get_session($) ;
sub get_shared_ciphers($;$$) ;
sub get_shutdown($) ;
sub get_ssl_method($) ;
sub get_state($) ;
sub get_time($) ;
sub get_timeout($) ;
sub get_verify_depth($) ;
sub get_verify_mode($) ;
sub get_verify_result($) ;
sub get_wbio($) ;
sub head_http3;
sub head_http4;
sub head_http;
sub head_https3;
sub head_https4;
sub head_https;
sub head_httpx3;
sub head_httpx4;
sub head_httpx;
sub hello() ;
sub http_cat;
sub https_cat;
sub httpx_cat;
sub i2d_OCSP_REQUEST($) ;
sub i2d_OCSP_RESPONSE($) ;
sub i2d_SSL_SESSION($$) ;
sub inet_aton;
sub inet_ntoa;
sub initialize;
sub library_init() ;
sub load_client_CA_file($) ;
sub load_error_strings() ;
sub make_form;
sub make_headers;
sub need_tmp_RSA($) ;
sub new($) ;
sub new_x_ctx;
sub num_renegotiations($) ;
sub open_proxy_tcp_connection;
sub open_tcp_connection;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub peek($;$) ;
sub pending($) ;
sub post_http3;
sub post_http4;
sub post_http;
sub post_https3;
sub post_https4;
sub post_https;
sub post_httpx3;
sub post_httpx4;
sub post_httpx;
sub put_http3;
sub put_http4;
sub put_http;
sub put_https3;
sub put_https4;
sub put_https;
sub put_httpx3;
sub put_httpx4;
sub put_httpx;
sub randomize(;$$$) ;
sub read($;$) ;
sub renegotiate($) ;
sub rstate_string($) ;
sub rstate_string_long($) ;
sub session_reused($) ;
sub set1_param($$) ;
sub set_SSL_CTX($$) ;
sub set_accept_state($) ;
sub set_alpn_protos($;$) ;
sub set_app_data($$) ;
sub set_bio($$$) ;
sub set_cert_and_key($$$) ;
sub set_cipher_list($$) ;
sub set_client_CA_list($$) ;
sub set_connect_state($) ;
sub set_ex_data($$$) ;
sub set_fd($$) ;
sub set_info_callback($$;$) ;
sub set_mode($$) ;
sub set_options($$) ;
sub set_pref_cipher($$) ;
sub set_proxy($$;**) ;
sub set_purpose($$) ;
sub set_quiet_shutdown($$) ;
sub set_read_ahead($;$) ;
sub set_rfd($$) ;
sub set_server_cert_and_key($$$) ;
sub set_session($$) ;
sub set_session_id_context($$$) ;
sub set_session_secret_cb($;$$) ;
sub set_shutdown($$) ;
sub set_ssl_method($$) ;
sub set_state($$) ;
sub set_time($$) ;
sub set_timeout($$) ;
sub set_tlsext_host_name($$) ;
sub set_tlsext_status_type($$) ;
sub set_tmp_dh($$) ;
sub set_tmp_dh_callback($$) ;
sub set_tmp_rsa($$) ;
sub set_tmp_rsa_callback($$) ;
sub set_trust($$) ;
sub set_verify($$$) ;
sub set_verify_depth($$) ;
sub set_verify_result($$) ;
sub set_wfd($$) ;
sub shutdown($) ;
sub sk_X509_NAME_free($) ;
sub sk_X509_NAME_num($) ;
sub sk_X509_NAME_value($$) ;
sub sockaddr_family;
sub ssl_read_CRLF($;$) ;
sub ssl_read_all;
sub ssl_read_until($;$$) ;
sub ssl_write_CRLF($$) ;
sub ssl_write_all;
sub sslcat;
sub state($) ;
sub state_string($) ;
sub state_string_long($) ;
sub tcp_read_CRLF;
sub tcp_read_all;
sub tcp_read_until;
sub tcp_write_CRLF;
sub tcp_write_all;
sub tcpcat;
sub tcpxcat;
sub total_renegotiations($) ;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub use_PrivateKey($$) ;
sub use_PrivateKey_ASN1($$$$) ;
sub use_PrivateKey_file($$$) ;
sub use_RSAPrivateKey($$) ;
sub use_RSAPrivateKey_ASN1($$$) ;
sub use_RSAPrivateKey_file($$$) ;
sub use_certificate($$) ;
sub use_certificate_ASN1($$$) ;
sub use_certificate_file($$$) ;
sub version($) ;
sub want($) ;
sub want_X509_lookup;
sub want_nothing;
sub want_read;
sub want_write;
sub write($$) ;
sub write_partial($$$$) ;
}
package ODBC {
sub Info;
sub ODBCCleanError;
sub ODBCClone;
sub ODBCColAttributes;
sub ODBCColumnList;
sub ODBCConfigDSN;
sub ODBCConnect;
sub ODBCDataSources;
sub ODBCDebug;
sub ODBCDisconnect;
sub ODBCDrivers;
sub ODBCDropCursor;
sub ODBCExecute;
sub ODBCFetch;
sub ODBCGetConnectOption;
sub ODBCGetConnections;
sub ODBCGetCursorName;
sub ODBCGetDSN;
sub ODBCGetData;
sub ODBCGetError;
sub ODBCGetFunctions;
sub ODBCGetInfo;
sub ODBCGetMaxBufSize;
sub ODBCGetSQLState;
sub ODBCGetStats;
sub ODBCGetStmtCloseType;
sub ODBCGetStmtOption;
sub ODBCGetTypeInfo;
sub ODBCInit;
sub ODBCMoreResults;
sub ODBCRowCount;
sub ODBCSetConnectOption;
sub ODBCSetCursorName;
sub ODBCSetMaxBufSize;
sub ODBCSetPos;
sub ODBCSetStmtCloseType;
sub ODBCSetStmtOption;
sub ODBCShutDown;
sub ODBCTableList;
sub ODBCTransact;
sub constant;
}
package Opcode {
sub _safe_call_sv($$$) ;
sub _safe_pkg_prep($) ;
sub define_optag($$) ;
sub deny($;@) ;
sub deny_only($;@) ;
sub empty_opset() ;
sub full_opset() ;
sub invert_opset($) ;
sub opcodes() ;
sub opdesc(;@) ;
sub opmask() ;
sub opmask_add($) ;
sub opset(;@) ;
sub opset_to_ops($;$) ;
sub permit($;@) ;
sub permit_only($;@) ;
sub verify_opset($;$) ;
}
package POSIX {
sub ARG_MAX() ;
sub B0() ;
sub B110() ;
sub B1200() ;
sub B134() ;
sub B150() ;
sub B1800() ;
sub B19200() ;
sub B200() ;
sub B2400() ;
sub B300() ;
sub B38400() ;
sub B4800() ;
sub B50() ;
sub B600() ;
sub B75() ;
sub B9600() ;
sub BRKINT() ;
sub BUS_ADRALN() ;
sub BUS_ADRERR() ;
sub BUS_OBJERR() ;
sub CHILD_MAX() ;
sub CLD_CONTINUED() ;
sub CLD_DUMPED() ;
sub CLD_EXITED() ;
sub CLD_KILLED() ;
sub CLD_STOPPED() ;
sub CLD_TRAPPED() ;
sub CLOCAL() ;
sub CREAD() ;
sub CS5() ;
sub CS6() ;
sub CS7() ;
sub CS8() ;
sub CSIZE() ;
sub CSTOPB() ;
sub EAI_OVERFLOW() ;
sub EAI_SYSTEM() ;
sub EBADMSG() ;
sub ECHO() ;
sub ECHOE() ;
sub ECHOK() ;
sub ECHONL() ;
sub EHOSTDOWN() ;
sub EIDRM() ;
sub ENODATA() ;
sub ENOLINK() ;
sub ENOMSG() ;
sub ENOSR() ;
sub ENOSTR() ;
sub ENOTBLK() ;
sub ENOTRECOVERABLE() ;
sub ENOTSUP() ;
sub EOTHER() ;
sub EOVERFLOW() ;
sub EOWNERDEAD() ;
sub EPROTO() ;
sub ERESTART() ;
sub ETIME() ;
sub ETXTBSY() ;
sub FD_CLOEXEC() ;
sub FPE_FLTDIV() ;
sub FPE_FLTINV() ;
sub FPE_FLTOVF() ;
sub FPE_FLTRES() ;
sub FPE_FLTSUB() ;
sub FPE_FLTUND() ;
sub FPE_INTDIV() ;
sub FPE_INTOVF() ;
sub F_DUPFD() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_RDLCK() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLKW() ;
sub F_UNLCK() ;
sub F_WRLCK() ;
sub HUPCL() ;
sub ICANON() ;
sub ICRNL() ;
sub IEXTEN() ;
sub IGNBRK() ;
sub IGNCR() ;
sub IGNPAR() ;
sub ILL_BADSTK() ;
sub ILL_COPROC() ;
sub ILL_ILLADR() ;
sub ILL_ILLOPC() ;
sub ILL_ILLOPN() ;
sub ILL_ILLTRP() ;
sub ILL_PRVOPC() ;
sub ILL_PRVREG() ;
sub INLCR() ;
sub INPCK() ;
sub ISIG() ;
sub ISTRIP() ;
sub IXOFF() ;
sub IXON() ;
sub LC_MESSAGES() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_ctermid() ;
sub L_cuserid() ;
sub L_tmpname() ;
sub MAX_CANON() ;
sub MAX_INPUT() ;
sub MSG_CTRUNC() ;
sub MSG_EOR() ;
sub MSG_TRUNC() ;
sub NAME_MAX() ;
sub NCCS() ;
sub NGROUPS_MAX() ;
sub NOFLSH() ;
sub OPEN_MAX() ;
sub OPOST() ;
sub O_NOCTTY() ;
sub O_NONBLOCK() ;
sub PARENB() ;
sub PARMRK() ;
sub PARODD() ;
sub PIPE_BUF() ;
sub POLL_ERR() ;
sub POLL_HUP() ;
sub POLL_IN() ;
sub POLL_MSG() ;
sub POLL_OUT() ;
sub POLL_PRI() ;
sub SA_NOCLDSTOP() ;
sub SA_NOCLDWAIT() ;
sub SA_NODEFER() ;
sub SA_ONSTACK() ;
sub SA_RESETHAND() ;
sub SA_RESTART() ;
sub SA_SIGINFO() ;
sub SEGV_ACCERR() ;
sub SEGV_MAPERR() ;
sub SIGALRM() ;
sub SIGBUS() ;
sub SIGCHLD() ;
sub SIGCONT() ;
sub SIGHUP() ;
sub SIGKILL() ;
sub SIGPIPE() ;
sub SIGPOLL() ;
sub SIGPROF() ;
sub SIGQUIT() ;
sub SIGRTMAX() ;
sub SIGRTMIN() ;
sub SIGSTOP() ;
sub SIGSYS() ;
sub SIGTRAP() ;
sub SIGTSTP() ;
sub SIGTTIN() ;
sub SIGTTOU() ;
sub SIGURG() ;
sub SIGUSR1() ;
sub SIGUSR2() ;
sub SIGVTALRM() ;
sub SIGXCPU() ;
sub SIGXFSZ() ;
sub SIG_BLOCK() ;
sub SIG_SETMASK() ;
sub SIG_UNBLOCK() ;
sub SI_ASYNCIO() ;
sub SI_MESGQ() ;
sub SI_QUEUE() ;
sub SI_TIMER() ;
sub SI_USER() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TCIFLUSH() ;
sub TCIOFF() ;
sub TCIOFLUSH() ;
sub TCION() ;
sub TCOFLUSH() ;
sub TCOOFF() ;
sub TCOON() ;
sub TCSADRAIN() ;
sub TCSAFLUSH() ;
sub TCSANOW() ;
sub TOSTOP() ;
sub TRAP_BRKPT() ;
sub TRAP_TRACE() ;
sub TZNAME_MAX() ;
sub VEOF() ;
sub VEOL() ;
sub VERASE() ;
sub VINTR() ;
sub VKILL() ;
sub VMIN() ;
sub VQUIT() ;
sub VSTART() ;
sub VSTOP() ;
sub VSUSP() ;
sub VTIME() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub WUNTRACED() ;
sub _PC_CHOWN_RESTRICTED() ;
sub _PC_LINK_MAX() ;
sub _PC_MAX_CANON() ;
sub _PC_MAX_INPUT() ;
sub _PC_NAME_MAX() ;
sub _PC_NO_TRUNC() ;
sub _PC_PATH_MAX() ;
sub _PC_PIPE_BUF() ;
sub _PC_VDISABLE() ;
sub _SC_ARG_MAX() ;
sub _SC_CHILD_MAX() ;
sub _SC_CLK_TCK() ;
sub _SC_JOB_CONTROL() ;
sub _SC_NGROUPS_MAX() ;
sub _SC_OPEN_MAX() ;
sub _SC_PAGESIZE() ;
sub _SC_SAVED_IDS() ;
sub _SC_STREAM_MAX() ;
sub _SC_TZNAME_MAX() ;
sub _SC_VERSION() ;
sub _exit;
sub abort;
sub abs;
sub access;
sub acos;
sub acosh;
sub alarm;
sub asctime;
sub asin;
sub asinh;
sub assert;
sub atan2;
sub atan;
sub atanh;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub cbrt;
sub ceil;
sub chdir;
sub chmod;
sub chown;
sub clearerr;
sub clock;
sub close;
sub closedir;
sub constant;
sub copysign;
sub cos;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub erf;
sub erfc;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub exit;
sub exp2;
sub exp;
sub expm1;
sub fabs;
sub fclose;
sub fcntl;
sub fdim;
sub fdopen;
sub fegetround;
sub feof;
sub ferror;
sub fesetround;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub fileno;
sub floor;
sub fma;
sub fmax;
sub fmin;
sub fmod;
sub fopen;
sub fork;
sub fpathconf;
sub fpclassify;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getc;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgrgid;
sub getgrnam;
sub getgroups;
sub getlogin;
sub getpayload;
sub getpgrp;
sub getpid;
sub getppid;
sub getpwnam;
sub getpwuid;
sub gets;
sub getuid;
sub gmtime;
sub hypot;
sub ilogb;
sub isatty;
sub isfinite;
sub isgreater;
sub isgreaterequal;
sub isinf;
sub isless;
sub islessequal;
sub islessgreater;
sub isnan;
sub isnormal;
sub issignaling;
sub isunordered;
sub j0;
sub j1;
sub jn;
sub kill;
sub labs;
sub lchown;
sub ldexp;
sub ldiv;
sub lgamma;
sub link;
sub localeconv;
sub localtime;
sub log10;
sub log1p;
sub log2;
sub log;
sub logb;
sub longjmp;
sub lrint;
sub lround;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkdir;
sub mkfifo;
sub mktime;
sub modf;
sub nan;
sub nearbyint;
sub nextafter;
sub nexttoward;
sub nice;
sub offsetof;
sub open;
sub opendir;
sub pathconf;
sub pause;
sub pipe;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub rand;
sub read;
sub readdir;
sub realloc;
sub remainder;
sub remove;
sub remquo;
sub rename;
sub rewind;
sub rewinddir;
sub rint;
sub rmdir;
sub round;
sub scalbn;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpayload;
sub setpayloadsig;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub signbit;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sin;
sub sinh;
sub sleep;
sub sqrt;
sub srand;
sub sscanf;
sub stat;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtoul;
sub strxfrm;
sub sysconf;
sub system;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetpgrp;
sub tgamma;
sub time;
sub times;
sub tmpfile;
sub tmpnam;
sub tolower;
sub toupper;
sub trunc;
sub ttyname;
sub tzname;
sub tzset;
sub umask;
sub uname;
sub ungetc;
sub unlink;
sub utime;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wait;
sub waitpid;
sub wcstombs;
sub wctomb;
sub write;
sub y0;
sub y1;
sub yn;
}
package POSIX::SigSet {
sub addset;
sub delset;
sub emptyset;
sub fillset;
sub ismember;
sub new;
}
package POSIX::Termios {
sub getattr;
sub getcc;
sub getcflag;
sub getiflag;
sub getispeed;
sub getlflag;
sub getoflag;
sub getospeed;
sub new;
sub setattr;
sub setcc;
sub setcflag;
sub setiflag;
sub setispeed;
sub setlflag;
sub setoflag;
sub setospeed;
}
package Package::DeprecationManager {
sub _HASH0($) ;
sub any(&@) ;
sub subname;
}
package Package::Stash {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package Package::Stash::XS {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package Params::Classify {
sub blessed_class($) ;
sub check_able($;$) ;
sub check_blessed($;$) ;
sub check_glob($) ;
sub check_ref($;$) ;
sub check_regexp($) ;
sub check_strictly_blessed($;$) ;
sub check_string($) ;
sub check_undef($) ;
sub is_able($;$) ;
sub is_blessed($;$) ;
sub is_glob($) ;
sub is_ref($;$) ;
sub is_regexp($) ;
sub is_strictly_blessed($;$) ;
sub is_string($) ;
sub is_undef($) ;
sub ref_type($) ;
sub scalar_class($) ;
}
package Params::Util {
sub _ARRAY($) ;
sub _ARRAY0($) ;
sub _ARRAYLIKE($) ;
sub _CODE($) ;
sub _CODELIKE($) ;
sub _HASH($) ;
sub _HASH0($) ;
sub _HASHLIKE($) ;
sub _INSTANCE($$) ;
sub _NUMBER($) ;
sub _REGEX($) ;
sub _SCALAR($) ;
sub _SCALAR0($) ;
sub _STRING($) ;
sub looks_like_number($) ;
}
package PerlIO {
sub get_layers(*;@) ;
}
package PerlIO::Layer {
sub NoWarnings;
sub find;
}
package Regexp {
sub DESTROY() ;
}
package SDBM_File {
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub sdbm_clearerr;
}
package Scalar::Util {
sub blessed($) ;
sub dualvar($$) ;
sub isdual($) ;
sub isvstring($) ;
sub isweak($) ;
sub looks_like_number($) ;
sub openhandle($) ;
sub readonly($) ;
sub refaddr($) ;
sub reftype($) ;
sub tainted($) ;
sub unweaken($) ;
sub weaken($) ;
}
package Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub AUTOLOAD;
sub EAI_ADDRFAMILY() ;
sub IOV_MAX() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub IPV6_MTU() ;
sub IPV6_MTU_DISCOVER() ;
sub IPV6_RECVERR() ;
sub IPV6_ROUTER_ALERT() ;
sub IPV6_V6ONLY() ;
sub IP_BIND_ADDRESS_NO_PORT() ;
sub IP_FREEBIND() ;
sub IP_MTU() ;
sub IP_MTU_DISCOVER() ;
sub IP_MULTICAST_ALL() ;
sub IP_NODEFRAG() ;
sub IP_PMTUDISC_DO() ;
sub IP_PMTUDISC_DONT() ;
sub IP_PMTUDISC_PROBE() ;
sub IP_PMTUDISC_WANT() ;
sub IP_RECVERR() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub IP_TRANSPARENT() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SOCK_CLOEXEC() ;
sub SOCK_NONBLOCK() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_BINDTODEVICE() ;
sub SO_BSDCOMPAT() ;
sub SO_BUSY_POLL() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_LOCK_FILTER() ;
sub SO_MARK() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEEK_OFF() ;
sub SO_PEERCRED() ;
sub SO_PRIORITY() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_RCVBUFFORCE() ;
sub SO_REUSEPORT() ;
sub SO_RXQ_OVFL() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_SNDBUFFORCE() ;
sub SO_STATE() ;
sub SO_TIMESTAMP() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONGESTION() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_FASTOPEN() ;
sub TCP_INFO() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_KEEPCNT() ;
sub TCP_KEEPIDLE() ;
sub TCP_KEEPINTVL() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MAXSEG() ;
sub TCP_MD5SIG() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_QUICKACK() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Storable {
sub dclone($) ;
sub init_perinterp() ;
sub is_retrieving() ;
sub is_storing() ;
sub last_op_in_netorder() ;
sub mretrieve($) ;
sub mstore($) ;
sub net_mstore($) ;
sub net_pstore($$) ;
sub pretrieve($) ;
sub pstore($$) ;
}
package Sub::Identify {
sub get_code_info($) ;
sub get_code_location($) ;
sub is_sub_constant($) ;
}
package Sub::Name {
sub subname;
}
package Sub::Util {
sub set_prototype;
sub set_subname;
sub subname;
}
package Sys::Hostname {
sub ghname;
}
package Sys::Syslog {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub EAI_ADDRFAMILY() ;
sub IOV_MAX() ;
sub IPTOS_LOWDELAY() ;
sub IPTOS_MINCOST() ;
sub IPTOS_RELIABILITY() ;
sub IPTOS_THROUGHPUT() ;
sub IPV6_ADDRFROM() ;
sub IPV6_MTU() ;
sub IPV6_MTU_DISCOVER() ;
sub IPV6_RECVERR() ;
sub IPV6_ROUTER_ALERT() ;
sub IPV6_V6ONLY() ;
sub IP_BIND_ADDRESS_NO_PORT() ;
sub IP_FREEBIND() ;
sub IP_MTU() ;
sub IP_MTU_DISCOVER() ;
sub IP_MULTICAST_ALL() ;
sub IP_NODEFRAG() ;
sub IP_PMTUDISC_DO() ;
sub IP_PMTUDISC_DONT() ;
sub IP_PMTUDISC_PROBE() ;
sub IP_PMTUDISC_WANT() ;
sub IP_RECVERR() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub IP_TRANSPARENT() ;
sub LOG_FAC;
sub LOG_MAKEPRI;
sub LOG_MASK;
sub LOG_PRI;
sub LOG_UPTO;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FASTOPEN() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SOCK_CLOEXEC() ;
sub SOCK_NONBLOCK() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_LOCK_FILTER() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_RCVBUFFORCE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_SNDBUFFORCE() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONGESTION() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_FASTOPEN() ;
sub TCP_INFO() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_KEEPCNT() ;
sub TCP_KEEPIDLE() ;
sub TCP_KEEPINTVL() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MAXSEG() ;
sub TCP_MD5SIG() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_QUICKACK() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub closelog_xs;
sub constant;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub openlog_xs;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub setlocale;
sub setlogmask_xs;
sub sockaddr_family;
sub strftime;
sub syslog_xs;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Sys::Syslog::Win32 {
sub EVENTLOG_AUDIT_FAILURE;
sub EVENTLOG_AUDIT_SUCCESS;
sub EVENTLOG_BACKWARDS_READ;
sub EVENTLOG_END_ALL_PAIRED_EVENTS;
sub EVENTLOG_END_PAIRED_EVENT;
sub EVENTLOG_FORWARDS_READ;
sub EVENTLOG_PAIRED_EVENT_ACTIVE;
sub EVENTLOG_PAIRED_EVENT_INACTIVE;
sub EVENTLOG_SEEK_READ;
sub EVENTLOG_SEQUENTIAL_READ;
sub EVENTLOG_START_PAIRED_EVENT;
sub EVENTLOG_SUCCESS;
}
package Tcl {
sub AppendElement;
sub AppendResult;
sub CreateCommand;
sub DESTROY;
sub DeleteCommand;
sub DoOneEvent;
sub Eval;
sub EvalFile;
sub EvalFileHandle;
sub GetVar2;
sub GetVar;
sub Init;
sub ResetResult;
sub SetResult;
sub SetVar2;
sub SetVar;
sub SplitList;
sub UnsetVar2;
sub UnsetVar;
sub _Finalize;
sub _new;
sub icall;
sub invoke;
sub result;
}
package Tcl::List {
sub as_string;
}
package Tcl::Var {
sub FETCH;
sub STORE;
}
package Term::ReadKey {
sub GetControlChars;
sub GetSpeed;
sub GetTermSizeGSIZE;
sub GetTermSizeGWINSZ;
sub GetTermSizeVIO;
sub GetTermSizeWin32;
sub SetControlChars;
sub SetReadMode;
sub SetTerminalSize;
sub Win32PeekChar;
sub blockoptions;
sub pollfile;
sub selectfile;
sub setnodelay;
sub termoptions;
sub termsizeoptions;
}
package Text::CSV_XS {
sub Combine;
sub Parse;
sub SetDiag;
sub _cache_diag;
sub _cache_set;
sub error_input;
sub getline;
sub getline_all;
sub print;
}
package Tie::Hash::NamedCapture {
sub CLEAR;
sub DELETE;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub SCALAR;
sub STORE;
sub TIEHASH;
sub flags;
}
package Time::HiRes {
sub CLONE(;@) ;
sub alarm($;$) ;
sub clock() ;
sub clock_getres(;$) ;
sub clock_gettime(;$) ;
sub clock_nanosleep($$;$) ;
sub constant($) ;
sub gettimeofday() ;
sub lstat(;$) ;
sub nanosleep($) ;
sub sleep(;@) ;
sub stat(;$) ;
sub time() ;
sub ualarm($;$) ;
sub usleep($) ;
sub utime($$;@) ;
}
package Time::Piece {
sub _crt_gmtime($) ;
sub _crt_localtime($) ;
sub _mini_mktime($$$$$$) ;
sub _strftime($$;$) ;
sub _strptime($$) ;
sub _tzset() ;
}
package Try::Tiny {
sub _subname;
}
package UNIVERSAL {
sub DOES;
sub VERSION;
sub can;
sub isa;
}
package Unicode::Collate {
sub _decompHangul;
sub _derivCE_14;
sub _derivCE_18;
sub _derivCE_20;
sub _derivCE_22;
sub _derivCE_24;
sub _derivCE_32;
sub _derivCE_8;
sub _derivCE_9;
sub _exists_simple;
sub _fetch_rest;
sub _fetch_simple;
sub _getHexArray;
sub _ignorable_simple;
sub _isIllegal;
sub _isUIdeo;
sub _uideoCE_8;
sub getHST;
sub mk_SortKey;
sub varCE;
sub visualizeSortKey;
}
package Unicode::Normalize {
sub FCC($) ;
sub NFC($) ;
sub NFD($) ;
sub NFKC($) ;
sub NFKD($) ;
sub checkFCC($) ;
sub checkFCD($) ;
sub checkNFC($) ;
sub checkNFD($) ;
sub checkNFKC($) ;
sub checkNFKD($) ;
sub compose($) ;
sub composeContiguous($) ;
sub decompose($;$) ;
sub getCanon($) ;
sub getCombinClass($) ;
sub getCompat($) ;
sub getComposite($$) ;
sub isComp2nd($) ;
sub isComp_Ex($) ;
sub isExclusion($) ;
sub isNFC_MAYBE($) ;
sub isNFC_NO($) ;
sub isNFD_NO($) ;
sub isNFKC_MAYBE($) ;
sub isNFKC_NO($) ;
sub isNFKD_NO($) ;
sub isNonStDecomp($) ;
sub isSingleton($) ;
sub reorder($) ;
sub splitOnLastStarter;
}
package Variable::Magic {
sub CLONE;
sub _wizard;
sub cast(\[$@%&*]$@) ;
sub dispell(\[$@%&*]$) ;
sub getdata(\[$@%&*]$) ;
}
package Win32 {
sub AbortSystemShutdown;
sub BuildNumber;
sub CopyFile;
sub CreateDirectory;
sub CreateFile;
sub DomainName;
sub ExpandEnvironmentStrings;
sub FormatMessage;
sub FreeLibrary;
sub FsType;
sub GetACP;
sub GetANSIPathName;
sub GetArchName;
sub GetChipName;
sub GetConsoleCP;
sub GetConsoleOutputCP;
sub GetCurrentProcessId;
sub GetCurrentThreadId;
sub GetCwd;
sub GetFileVersion;
sub GetFolderPath;
sub GetFullPathName;
sub GetLastError;
sub GetLongPathName;
sub GetNextAvailDrive;
sub GetOEMCP;
sub GetOSVersion;
sub GetProcAddress;
sub GetProductInfo;
sub GetShortPathName;
sub GetSystemMetrics;
sub GetTickCount;
sub GuidGen;
sub InitiateSystemShutdown;
sub IsAdminUser;
sub IsWin95;
sub IsWinNT;
sub LoadLibrary;
sub LoginName;
sub LookupAccountName;
sub LookupAccountSID;
sub MsgBox;
sub NodeName;
sub OutputDebugString;
sub RegisterServer;
sub SetChildShowWindow;
sub SetConsoleCP;
sub SetConsoleOutputCP;
sub SetCwd;
sub SetLastError;
sub Sleep;
sub Spawn;
sub UnregisterServer;
}
package Win32::API {
sub Call;
sub FreeLibrary;
sub FromUnicode;
sub GetMagicSV;
sub GetModuleFileName;
sub GetProcAddress;
sub IsBadReadPtr;
sub IsBadStringPtr;
sub LoadLibrary;
sub MoveMemory;
sub PointerAt;
sub PointerTo;
sub ReadMemory;
sub SafeReadWideCString;
sub SetMagicSV;
sub ToUnicode;
sub WriteMemory;
sub _Align;
sub _ImportXS;
sub _TruncateToWideNull;
sub _my_cxt_clone;
sub looks_like_number($) ;
sub weaken($) ;
}
package Win32::API::Callback {
sub IsBadStringPtr;
sub MakeParamArr;
sub PackedRVTarget;
sub WriteMemory;
}
package Win32::API::Callback::HeapBlock {
sub DESTROY;
sub new;
}
package Win32::API::Callback::IATPatch {
sub CLONE_SKIP;
sub DESTROY;
sub GetOriginalFunctionPtr;
sub Unpatch;
sub new;
}
package Win32::AuthenticateUser {
sub AuthenticateUser;
sub constant;
}
package Win32::ChangeNotify {
sub Close($) ;
sub DESTROY($) ;
sub FindNext($) ;
sub _new($$$$) ;
sub close($) ;
sub constant($) ;
sub reset($) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::Clipboard {
sub Empty;
sub EnumFormats;
sub GetAs;
sub GetBitmap;
sub GetFiles;
sub GetFormatName;
sub GetText;
sub IsBitmap;
sub IsFiles;
sub IsFormatAvailable;
sub IsText;
sub Set;
sub StartClipboardViewer;
sub StopClipboardViewer;
sub WaitForChange;
sub constant;
}
package Win32::Console {
sub Alloc;
sub Free;
sub MouseButtons;
sub _CloseHandle;
sub _CreateConsoleScreenBuffer;
sub _FillConsoleOutputAttribute;
sub _FillConsoleOutputCharacter;
sub _FlushConsoleInputBuffer;
sub _GenerateConsoleCtrlEvent;
sub _GetConsoleCP;
sub _GetConsoleCursorInfo;
sub _GetConsoleMode;
sub _GetConsoleOutputCP;
sub _GetConsoleScreenBufferInfo;
sub _GetConsoleTitle;
sub _GetLargestConsoleWindowSize;
sub _GetNumberOfConsoleInputEvents;
sub _GetStdHandle;
sub _PeekConsoleInput;
sub _ReadConsole;
sub _ReadConsoleInput;
sub _ReadConsoleOutput;
sub _ReadConsoleOutputAttribute;
sub _ReadConsoleOutputCharacter;
sub _ScrollConsoleScreenBuffer;
sub _SetConsoleActiveScreenBuffer;
sub _SetConsoleCP;
sub _SetConsoleCursorInfo;
sub _SetConsoleCursorPosition;
sub _SetConsoleIcon;
sub _SetConsoleMode;
sub _SetConsoleOutputCP;
sub _SetConsoleScreenBufferSize;
sub _SetConsoleTextAttribute;
sub _SetConsoleTitle;
sub _SetConsoleWindowInfo;
sub _SetStdHandle;
sub _WriteConsole;
sub _WriteConsoleInput;
sub _WriteConsoleOutput;
sub _WriteConsoleOutputAttribute;
sub _WriteConsoleOutputCharacter;
sub constant;
}
package Win32::Console::ANSI {
sub Cls() ;
sub Cursor(;@) ;
sub CursorSize(;@) ;
sub MinimizeAll() ;
sub ScriptCP(;@) ;
sub SetCloseButton($) ;
sub SetConsoleFullScreen($) ;
sub SetConsoleSize($$) ;
sub SetMonitorState($) ;
sub ShowConsoleWindow($) ;
sub Title(;@) ;
sub XYMax() ;
sub _GetConsoleColors() ;
sub _GetCursorInfo() ;
sub _ScreenDump() ;
sub _SetConsoleStandard() ;
sub _chcp($$) ;
}
package Win32::Event {
sub DESTROY($) ;
sub new($;$$$) ;
sub open($$) ;
sub pulse($) ;
sub reset($) ;
sub set($) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::EventLog {
sub BackupEventLog;
sub ClearEventLog;
sub CloseEventLog;
sub DeregisterEventSource;
sub EVENTLOG_AUDIT_FAILURE;
sub EVENTLOG_AUDIT_SUCCESS;
sub EVENTLOG_BACKWARDS_READ;
sub EVENTLOG_END_ALL_PAIRED_EVENTS;
sub EVENTLOG_END_PAIRED_EVENT;
sub EVENTLOG_FORWARDS_READ;
sub EVENTLOG_PAIRED_EVENT_ACTIVE;
sub EVENTLOG_PAIRED_EVENT_INACTIVE;
sub EVENTLOG_SEEK_READ;
sub EVENTLOG_SEQUENTIAL_READ;
sub EVENTLOG_START_PAIRED_EVENT;
sub EVENTLOG_SUCCESS;
sub GetEventLogText;
sub GetNumberOfEventLogRecords;
sub GetOldestEventLogRecord;
sub OpenBackupEventLog;
sub OpenEventLog;
sub ReadEventLog;
sub RegisterEventSource;
sub WriteEventLog;
sub constant;
}
package Win32::File {
sub GetAttributes($$) ;
sub SetAttributes($$) ;
sub constant($) ;
}
package Win32::FileSecurity {
sub EnumerateRights;
sub Get;
sub MakeMask;
sub Set;
sub constant;
}
package Win32::IPC {
sub Wait($$) ;
sub constant($) ;
sub wait($;$) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::Internet {
sub FormatMessage;
sub FtpCreateDirectory;
sub FtpDeleteFile;
sub FtpFindFirstFile;
sub FtpGetCurrentDirectory;
sub FtpGetFile;
sub FtpPutFile;
sub FtpRemoveDirectory;
sub FtpRenameFile;
sub FtpSetCurrentDirectory;
sub HttpAddRequestHeaders;
sub HttpOpenRequest;
sub HttpQueryInfo;
sub HttpSendRequest;
sub InternetCanonicalizeUrl;
sub InternetCloseHandle;
sub InternetCombineUrl;
sub InternetConnect;
sub InternetCrackUrl;
sub InternetCreateUrl;
sub InternetDllVersion;
sub InternetFindNextFile;
sub InternetGetLastResponseInfo;
sub InternetOpen;
sub InternetOpenUrl;
sub InternetQueryDataAvailable;
sub InternetQueryOption;
sub InternetReadFile;
sub InternetSetOption;
sub InternetSetStatusCallback;
sub InternetTimeFromSystemTime;
sub InternetTimeToSystemTime;
sub constant;
}
package Win32::Job {
sub DESTROY;
sub kill;
sub new;
sub run;
sub spawn;
sub status;
sub watch;
}
package Win32::Job::_handle {
sub DESTROY;
}
package Win32::Mutex {
sub DESTROY($) ;
sub Release($) ;
sub new($;$$) ;
sub open($$) ;
sub release($) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::NetAdmin {
sub GetAliasFromRID;
sub GetAnyDomainController;
sub GetDomainController;
sub GetServerDisks;
sub GetServers;
sub GetTransports;
sub GetUserGroupFromRID;
sub GetUsers;
sub GroupAddUsers;
sub GroupCreate;
sub GroupDelete;
sub GroupDeleteUsers;
sub GroupGetAttributes;
sub GroupGetMembers;
sub GroupIsMember;
sub GroupSetAttributes;
sub LocalGroupAddUsers;
sub LocalGroupCreate;
sub LocalGroupDelete;
sub LocalGroupDeleteUsers;
sub LocalGroupGetAttributes;
sub LocalGroupGetMembers;
sub LocalGroupGetMembersWithDomain;
sub LocalGroupIsMember;
sub LocalGroupSetAttributes;
sub LoggedOnUsers;
sub UserChangePassword;
sub UserCreate;
sub UserDelete;
sub UserGetAttributes;
sub UserSetAttributes;
sub UsersExist;
sub constant;
}
package Win32::NetResource {
sub CancelConnection;
sub GetConnection;
sub GetError;
sub GetUNCName;
sub NetShareCheck;
sub NetShareDel;
sub WNetGetLastError;
sub _AddConnection;
sub _GetSharedResources;
sub _NetShareAdd;
sub _NetShareGetInfo;
sub _NetShareSetInfo;
sub constant;
}
package Win32::ODBC {
sub Info;
sub ODBCCleanError;
sub ODBCClone;
sub ODBCColAttributes;
sub ODBCColumnList;
sub ODBCConfigDSN;
sub ODBCConnect;
sub ODBCDataSources;
sub ODBCDebug;
sub ODBCDisconnect;
sub ODBCDrivers;
sub ODBCDropCursor;
sub ODBCExecute;
sub ODBCFetch;
sub ODBCGetConnectOption;
sub ODBCGetConnections;
sub ODBCGetCursorName;
sub ODBCGetDSN;
sub ODBCGetData;
sub ODBCGetError;
sub ODBCGetFunctions;
sub ODBCGetInfo;
sub ODBCGetMaxBufSize;
sub ODBCGetSQLState;
sub ODBCGetStats;
sub ODBCGetStmtCloseType;
sub ODBCGetStmtOption;
sub ODBCGetTypeInfo;
sub ODBCInit;
sub ODBCMoreResults;
sub ODBCRowCount;
sub ODBCSetConnectOption;
sub ODBCSetCursorName;
sub ODBCSetMaxBufSize;
sub ODBCSetPos;
sub ODBCSetStmtCloseType;
sub ODBCSetStmtOption;
sub ODBCShutDown;
sub ODBCTableList;
sub ODBCTransact;
sub constant;
}
package Win32::OLE {
sub DESTROY;
sub Dispatch;
sub EnumAllObjects;
sub Forward;
sub FreeUnusedLibraries;
sub GetActiveObject;
sub GetIDsOfNames;
sub GetObject;
sub GetTypeInfo;
sub Initialize;
sub MessageLoop;
sub QueryInterface;
sub QueryObjectType;
sub QuitMessageLoop;
sub SpinMessageLoop;
sub Uninitialize;
sub WithEvents;
sub _Unique;
sub new;
}
package Win32::OLE::Const {
sub _Constants;
sub _LoadRegTypeLib;
sub _ShowHelpContext;
sub _Typelibs;
}
package Win32::OLE::Enum {
sub All;
sub Clone;
sub DESTROY;
sub Next;
sub Reset;
sub Skip;
sub new;
}
package Win32::OLE::NLS {
sub CompareString;
sub GetLocaleInfo;
sub GetStringType;
sub GetSystemDefaultLCID;
sub GetSystemDefaultLangID;
sub GetUserDefaultLCID;
sub GetUserDefaultLangID;
sub LCMapString;
sub SendSettingChange;
sub SetLocaleInfo;
}
package Win32::OLE::Tie {
sub DESTROY;
sub FIRSTENUM;
sub FIRSTKEY;
sub Fetch;
sub NEXTENUM;
sub NEXTKEY;
sub Store;
}
package Win32::OLE::TypeInfo {
sub DESTROY;
sub GetContainingTypeLib;
sub _GetDocumentation;
sub _GetFuncDesc;
sub _GetImplTypeFlags;
sub _GetImplTypeInfo;
sub _GetNames;
sub _GetTypeAttr;
sub _GetVarDesc;
sub _new;
}
package Win32::OLE::TypeLib {
sub DESTROY;
sub GetTypeInfo;
sub _GetDocumentation;
sub _GetLibAttr;
sub _GetTypeInfo;
sub _GetTypeInfoCount;
sub new;
}
package Win32::OLE::Variant {
sub As;
sub ChangeType;
sub Copy;
sub Currency;
sub DESTROY;
sub Date;
sub Dim;
sub Get;
sub IsNothing;
sub IsNullString;
sub LastError;
sub Number;
sub Put;
sub Time;
sub Type;
sub Unicode;
sub Value;
sub _Clone;
sub _RefType;
sub _Value;
sub new;
}
package Win32::PerfLib {
sub PerfLibClose;
sub PerfLibGetHelp;
sub PerfLibGetNames;
sub PerfLibGetObjects;
sub PerfLibOpen;
sub constant;
}
package Win32::Pipe {
sub Info;
sub PipeBufferSize;
sub PipeClose;
sub PipeConnect;
sub PipeCreate;
sub PipeDisconnect;
sub PipeError;
sub PipeRead;
sub PipeResizeBuffer;
sub PipeWrite;
sub constant;
}
package Win32::Process {
sub Create;
sub DESTROY;
sub GetCurrentProcessID;
sub GetExitCode;
sub GetPriorityClass;
sub GetProcessAffinityMask;
sub GetProcessID;
sub Kill;
sub KillProcess;
sub Open;
sub Resume;
sub SetPriorityClass;
sub SetProcessAffinityMask;
sub Suspend;
sub Wait;
sub constant;
sub get_Win32_IPC_HANDLE;
sub get_process_handle;
}
package Win32::Registry {
sub RegCloseKey;
sub RegConnectRegistry;
sub RegCreateKey;
sub RegCreateKeyEx;
sub RegDeleteKey;
sub RegDeleteValue;
sub RegEnumKey;
sub RegEnumKeyEx;
sub RegEnumValue;
sub RegFlushKey;
sub RegGetKeySecurity;
sub RegLoadKey;
sub RegNotifyChangeKeyValue;
sub RegOpenKey;
sub RegOpenKeyEx;
sub RegQueryInfoKey;
sub RegQueryValue;
sub RegQueryValueEx;
sub RegReplaceKey;
sub RegRestoreKey;
sub RegSaveKey;
sub RegSetKeySecurity;
sub RegSetValue;
sub RegSetValueEx;
sub RegUnLoadKey;
sub constant;
}
package Win32::Semaphore {
sub DESTROY($) ;
sub Release($$;$) ;
sub new($$$;$) ;
sub open($$) ;
sub release($$;$) ;
sub wait_all(\@;$) ;
sub wait_any(\@;$) ;
}
package Win32::Service {
sub GetServices;
sub GetStatus;
sub PauseService;
sub ResumeService;
sub StartService;
sub StopService;
sub constant;
}
package Win32::Shortcut {
sub _Exit;
sub _GetArguments;
sub _GetDescription;
sub _GetHotkey;
sub _GetIconLocation;
sub _GetPath;
sub _GetShowCmd;
sub _GetWorkingDirectory;
sub _Instance;
sub _Load;
sub _Release;
sub _Resolve;
sub _Save;
sub _SetArguments;
sub _SetDescription;
sub _SetHotkey;
sub _SetIconLocation;
sub _SetPath;
sub _SetShowCmd;
sub _SetWorkingDirectory;
sub constant;
}
package Win32::Sound {
sub DeviceInfo;
sub Devices;
sub Format;
sub Play;
sub Stop;
sub _Volume;
sub _constant;
}
package Win32::Sound::WaveOut {
sub Close;
sub CloseDevice;
sub DESTROY;
sub GetErrorText;
sub Load;
sub Open;
sub OpenDevice;
sub Pause;
sub Play;
sub Position;
sub Reset;
sub Restart;
sub Save;
sub Status;
sub Unload;
sub Write;
sub _Pitch;
sub _PlaybackRate;
sub _Volume;
}
package Win32::UTCFileTime {
sub CLONE(;@) ;
sub _alt_stat($) ;
sub _get_utc_file_times($) ;
sub _set_error_mode($) ;
sub _set_utc_file_times($$$) ;
sub constant($) ;
}
package Win32::WinError {
sub constant;
}
package Win32API::File {
sub CloseHandle;
sub CopyFileA;
sub CopyFileW;
sub CreateFileA;
sub CreateFileW;
sub DefineDosDeviceA;
sub DefineDosDeviceW;
sub DeleteFileA;
sub DeleteFileW;
sub DeviceIoControl;
sub FdGetOsFHandle;
sub GetDriveTypeA;
sub GetDriveTypeW;
sub GetFileAttributesA;
sub GetFileAttributesW;
sub GetFileSize;
sub GetFileType;
sub GetHandleInformation;
sub GetLogicalDriveStringsA;
sub GetLogicalDriveStringsW;
sub GetLogicalDrives;
sub GetOverlappedResult;
sub GetStdHandle;
sub GetVolumeInformationA;
sub GetVolumeInformationW;
sub IsContainerPartition;
sub IsRecognizedPartition;
sub MoveFileA;
sub MoveFileExA;
sub MoveFileExW;
sub MoveFileW;
sub OsFHandleOpenFd;
sub QueryDosDeviceA;
sub QueryDosDeviceW;
sub ReadFile;
sub SetErrorMode;
sub SetFilePointer;
sub SetHandleInformation;
sub SetStdHandle;
sub WriteFile;
sub _fileLastError;
}
package Win32API::Net {
sub GetDCName($$$) ;
sub GroupAdd($$$$) ;
sub GroupAddUser($$$) ;
sub GroupDel($$) ;
sub GroupDelUser($$$) ;
sub GroupEnum($$) ;
sub GroupGetInfo($$$$) ;
sub GroupGetUsers($$$) ;
sub GroupSetInfo($$$$$) ;
sub GroupSetUsers($$$) ;
sub LocalGroupAdd($$$$) ;
sub LocalGroupAddMembers($$$) ;
sub LocalGroupDel($$) ;
sub LocalGroupDelMembers($$$) ;
sub LocalGroupEnum($$) ;
sub LocalGroupGetInfo($$$$) ;
sub LocalGroupGetMembers($$$) ;
sub LocalGroupSetInfo($$$$$) ;
sub UserAdd($$$$) ;
sub UserChangePassword($$$$) ;
sub UserDel($$) ;
sub UserEnum($$;$) ;
sub UserGetGroups($$$) ;
sub UserGetInfo($$$$) ;
sub UserGetLocalGroups($$$;$) ;
sub UserSetGroups($$@) ;
sub UserSetInfo($$$$$) ;
sub constant($$) ;
}
package Win32API::Registry {
sub AbortSystemShutdownA;
sub AbortSystemShutdownW;
sub AllowPriv;
sub InitiateSystemShutdownA;
sub InitiateSystemShutdownW;
sub RegCloseKey;
sub RegConnectRegistryA;
sub RegConnectRegistryW;
sub RegCreateKeyA;
sub RegCreateKeyExA;
sub RegCreateKeyExW;
sub RegCreateKeyW;
sub RegDeleteKeyA;
sub RegDeleteKeyW;
sub RegDeleteValueA;
sub RegDeleteValueW;
sub RegFlushKey;
sub RegLoadKeyA;
sub RegLoadKeyW;
sub RegNotifyChangeKeyValue;
sub RegOpenKeyA;
sub RegOpenKeyExA;
sub RegOpenKeyExW;
sub RegOpenKeyW;
sub RegReplaceKeyA;
sub RegReplaceKeyW;
sub RegRestoreKeyA;
sub RegRestoreKeyW;
sub RegSaveKeyA;
sub RegSaveKeyW;
sub RegSetKeySecurity;
sub RegUnLoadKeyA;
sub RegUnLoadKeyW;
sub _RegEnumKeyA;
sub _RegEnumKeyExA;
sub _RegEnumKeyExW;
sub _RegEnumKeyW;
sub _RegEnumValueA;
sub _RegEnumValueW;
sub _RegGetKeySecurity;
sub _RegQueryInfoKeyA;
sub _RegQueryInfoKeyW;
sub _RegQueryMultipleValuesA;
sub _RegQueryMultipleValuesW;
sub _RegQueryValueA;
sub _RegQueryValueExA;
sub _RegQueryValueExW;
sub _RegQueryValueW;
sub _RegSetValueA;
sub _RegSetValueExA;
sub _RegSetValueExW;
sub _RegSetValueW;
sub _regLastError;
}
package XML::LibXML {
sub AUTOLOAD;
sub DISABLE_THREAD_SUPPORT;
sub HAVE_READER;
sub HAVE_SCHEMAS;
sub HAVE_STRUCT_ERRORS;
sub HAVE_THREAD_SUPPORT;
sub INIT_THREAD_SUPPORT;
sub LIBXML_DOTTED_VERSION;
sub LIBXML_RUNTIME_VERSION;
sub LIBXML_VERSION;
sub _CLONE;
sub _default_catalog;
sub _dump_registry;
sub _end_push;
sub _end_sax_push;
sub _externalEntityLoader;
sub _leaked_nodes;
sub _parse_fh;
sub _parse_file;
sub _parse_html_fh;
sub _parse_html_file;
sub _parse_html_string;
sub _parse_sax_fh;
sub _parse_sax_file;
sub _parse_sax_string;
sub _parse_sax_xml_chunk;
sub _parse_string;
sub _parse_xml_chunk;
sub _processXIncludes;
sub _push;
sub _start_push;
sub decodeFromUTF8;
sub encodeToUTF8;
sub export_GDOME;
sub import_GDOME;
sub load_catalog;
}
package XML::LibXML::Attr {
sub _setNamespace;
sub getNextSibling;
sub getOwnerElement;
sub getParentNode;
sub getPreviousSibling;
sub getValue;
sub isId;
sub name;
sub new;
sub nextSibling;
sub ownerElement;
sub parentElement;
sub previousSibling;
sub serialize;
sub serializeContent;
sub setValue;
sub toString;
sub value;
}
package XML::LibXML::CDATASection {
sub new;
}
package XML::LibXML::Comment {
sub new;
}
package XML::LibXML::Common {
sub decodeFromUTF8;
sub encodeToUTF8;
}
package XML::LibXML::Devel {
sub fix_owner;
sub mem_used;
sub node_from_perl;
sub node_to_perl;
sub refcnt;
sub refcnt_dec;
sub refcnt_inc;
}
package XML::LibXML::Document {
sub URI;
sub _setDocumentElement;
sub _toString;
sub adoptNode;
sub cloneNode;
sub compression;
sub createAttribute;
sub createAttributeNS;
sub createCDATASection;
sub createComment;
sub createDTD;
sub createDocument;
sub createDocumentFragment;
sub createElement;
sub createElementNS;
sub createEntityReference;
sub createExternalSubset;
sub createInternalSubset;
sub createPI;
sub createProcessingInstruction;
sub createRawElement;
sub createRawElementNS;
sub createTextNode;
sub documentElement;
sub documentURI;
sub encoding;
sub externalSubset;
sub getDocumentElement;
sub getElementById;
sub getElementsById;
sub getEncoding;
sub getVersion;
sub importNode;
sub indexElements;
sub internalSubset;
sub is_valid;
sub new;
sub removeExternalSubset;
sub removeInternalSubset;
sub serialize_html;
sub setCompression;
sub setEncoding;
sub setExternalSubset;
sub setInternalSubset;
sub setStandalone;
sub setURI;
sub setVersion;
sub standalone;
sub toFH;
sub toFile;
sub toStringHTML;
sub validate;
sub version;
sub xmlEncoding;
sub xmlStandalone;
sub xmlVersion;
}
package XML::LibXML::DocumentFragment {
sub addNewChild;
sub appendText;
sub appendTextNode;
sub new;
}
package XML::LibXML::Dtd {
sub getPublicId;
sub getSystemId;
sub new;
sub parse_string;
sub parse_uri;
sub publicId;
sub systemId;
}
package XML::LibXML::Element {
sub _getAttribute;
sub _getAttributeNS;
sub _getNamespaceDeclURI;
sub _setAttribute;
sub _setAttributeNS;
sub _setNamespace;
sub addNewChild;
sub appendText;
sub appendTextChild;
sub appendTextNode;
sub blessed($) ;
sub getAttributeNode;
sub getAttributeNodeNS;
sub hasAttribute;
sub hasAttributeNS;
sub new;
sub removeAttribute;
sub removeAttributeNS;
sub removeAttributeNode;
sub setAttributeNode;
sub setAttributeNodeNS;
sub setNamespaceDeclPrefix;
sub setNamespaceDeclURI;
sub tagName;
}
package XML::LibXML::HashTable {
sub DESTROY;
sub new;
}
package XML::LibXML::InputCallback {
sub lib_cleanup_callbacks;
sub lib_init_callbacks;
}
package XML::LibXML::LibError {
sub code;
sub context_and_column;
sub domain;
sub file;
sub int1;
sub int2;
sub level;
sub line;
sub message;
sub num1;
sub num2;
sub str1;
sub str2;
sub str3;
}
package XML::LibXML::Namespace {
sub DESTROY;
sub _isEqual;
sub declaredPrefix;
sub declaredURI;
sub getData;
sub getLocalName;
sub getType;
sub getValue;
sub href;
sub localname;
sub new;
sub nodeType;
sub nodeValue;
sub unique_key;
sub value2;
sub value;
}
package XML::LibXML::Node {
sub DESTROY;
sub _attributes;
sub _childNodes;
sub _find;
sub _findnodes;
sub _getChildrenByTagNameNS;
sub _toStringC14N;
sub addChild;
sub addSibling;
sub appendChild;
sub baseURI;
sub cloneNode;
sub firstChild;
sub firstNonBlankChild;
sub getAttributes;
sub getChildnodes;
sub getData;
sub getFirstChild;
sub getLastChild;
sub getLocalName;
sub getName;
sub getNamespace;
sub getNamespaceURI;
sub getNamespaces;
sub getNextSibling;
sub getOwner;
sub getOwnerDocument;
sub getOwnerElement;
sub getParentNode;
sub getPrefix;
sub getPreviousSibling;
sub getType;
sub getValue;
sub hasAttributes;
sub hasChildNodes;
sub insertAfter;
sub insertBefore;
sub isEqual;
sub isSameNode;
sub lastChild;
sub line_number;
sub localNS;
sub localName;
sub localNamespace;
sub localname;
sub lookupNamespacePrefix;
sub lookupNamespaceURI;
sub namespaceURI;
sub namespaces;
sub nextNonBlankSibling;
sub nextSibling;
sub nodeName;
sub nodePath;
sub nodeType;
sub nodeValue;
sub normalize;
sub ownerDocument;
sub ownerNode;
sub parentNode;
sub prefix;
sub previousNonBlankSibling;
sub previousSibling;
sub removeChild;
sub removeChildNodes;
sub replaceChild;
sub replaceNode;
sub serialize;
sub setBaseURI;
sub setName;
sub setNodeName;
sub setRawName;
sub string_value;
sub textContent;
sub toString;
sub to_literal;
sub to_number;
sub unbindNode;
sub unique_key;
sub unlink;
sub unlinkNode;
}
package XML::LibXML::PI {
sub _setData;
}
package XML::LibXML::ParserContext {
sub DESTROY;
}
package XML::LibXML::Pattern {
sub DESTROY;
sub _compilePattern;
sub matchesNode;
}
package XML::LibXML::Reader {
sub _DESTROY;
sub _close;
sub _getParserProp;
sub _newForDOM;
sub _newForFd;
sub _newForFile;
sub _newForIO;
sub _newForString;
sub _nodePath;
sub _preservePattern;
sub _setParserProp;
sub _setRelaxNG;
sub _setRelaxNGFile;
sub _setXSD;
sub _setXSDFile;
sub attributeCount;
sub baseURI;
sub byteConsumed;
sub columnNumber;
sub copyCurrentNode;
sub depth;
sub document;
sub encoding;
sub finish;
sub getAttribute;
sub getAttributeHash;
sub getAttributeNo;
sub getAttributeNs;
sub hasAttributes;
sub hasValue;
sub isDefault;
sub isEmptyElement;
sub isNamespaceDecl;
sub isValid;
sub lineNumber;
sub localName;
sub lookupNamespace;
sub matchesPattern;
sub moveToAttribute;
sub moveToAttributeNo;
sub moveToAttributeNs;
sub moveToElement;
sub moveToFirstAttribute;
sub moveToNextAttribute;
sub name;
sub namespaceURI;
sub next;
sub nextElement;
sub nextPatternMatch;
sub nextSibling;
sub nextSiblingElement;
sub nodeType;
sub prefix;
sub preserveNode;
sub quoteChar;
sub read;
sub readAttributeValue;
sub readInnerXml;
sub readOuterXml;
sub readState;
sub skipSiblings;
sub standalone;
sub value;
sub xmlLang;
sub xmlVersion;
}
package XML::LibXML::RegExp {
sub DESTROY;
sub _compile;
sub isDeterministic;
sub matches;
}
package XML::LibXML::RelaxNG {
sub DESTROY;
sub parse_buffer;
sub parse_document;
sub parse_location;
sub validate;
}
package XML::LibXML::Schema {
sub DESTROY;
sub parse_buffer;
sub parse_location;
sub validate;
}
package XML::LibXML::Text {
sub appendData;
sub data;
sub deleteData;
sub insertData;
sub new;
sub replaceData;
sub setData;
sub substringData;
}
package XML::LibXML::XPathContext {
sub DESTROY;
sub _find;
sub _findnodes;
sub _free_node_pool;
sub getContextNode;
sub getContextPosition;
sub getContextSize;
sub getVarLookupData;
sub getVarLookupFunc;
sub lookupNs;
sub new;
sub registerFunctionNS;
sub registerNs;
sub registerVarLookupFunc;
sub setContextNode;
sub setContextPosition;
sub setContextSize;
}
package XML::LibXML::XPathExpression {
sub DESTROY;
sub new;
}
package XML::Parser::Expat {
sub DefaultCurrent;
sub Do_External_Parse;
sub ElementIndex;
sub ErrorString;
sub FreeEncoding;
sub GenerateNSName;
sub GetBase;
sub GetCurrentByteIndex;
sub GetCurrentColumnNumber;
sub GetCurrentLineNumber;
sub GetErrorCode;
sub GetSpecifiedAttributeCount;
sub LoadEncoding;
sub OriginalString;
sub ParseDone;
sub ParsePartial;
sub ParseStream;
sub ParseString;
sub ParserCreate;
sub ParserFree;
sub ParserRelease;
sub PositionContext;
sub RecognizedString;
sub SetAttListDeclHandler;
sub SetBase;
sub SetCharacterDataHandler;
sub SetCommentHandler;
sub SetDefaultHandler;
sub SetDoctypeHandler;
sub SetElementDeclHandler;
sub SetEndCdataHandler;
sub SetEndDoctypeHandler;
sub SetEndElementHandler;
sub SetEntityDeclHandler;
sub SetExtEntFinishHandler;
sub SetExternalEntityRefHandler;
sub SetNotationDeclHandler;
sub SetProcessingInstructionHandler;
sub SetStartCdataHandler;
sub SetStartElementHandler;
sub SetUnparsedEntityDeclHandler;
sub SetXMLDeclHandler;
sub SkipUntil;
sub UnsetAllHandlers;
}
package YAML::Syck {
sub DumpJSON;
sub DumpJSONFile;
sub DumpJSONInto;
sub DumpYAML;
sub DumpYAMLFile;
sub DumpYAMLInto;
sub LoadJSON;
sub LoadYAML;
}
package YAML::XS::LibYAML {
sub Dump;
sub Load;
}
package arybase {
sub FETCH;
sub STORE;
}
package arybase::mg {
sub FETCH;
sub STORE;
}
package attributes {
sub _fetch_attrs($) ;
sub _guess_stash($) ;
sub _modify_attrs;
sub reftype($) ;
}
package bytes {
sub chr(_) ;
sub index($$;$) ;
sub length(_) ;
sub ord(_) ;
sub rindex($$;$) ;
sub substr($$;$$) ;
}
package constant {
sub _make_const(\[$@]) ;
}
package mro {
sub _nextcan;
sub get_isarev($) ;
sub get_linear_isa($;$) ;
sub get_mro($) ;
sub get_pkg_gen($) ;
sub invalidate_all_method_caches() ;
sub is_universal($) ;
sub method_changed_in($) ;
sub set_mro($$) ;
}
package re {
sub install;
sub is_regexp($) ;
sub regexp_pattern($) ;
sub regmust($) ;
sub regname(;$$) ;
sub regnames(;$) ;
sub regnames_count() ;
}
package threads {
sub DESTROY;
sub _handle;
sub create;
sub detach;
sub equal;
sub error;
sub get_stack_size;
sub is_detached;
sub is_joinable;
sub is_running;
sub join;
sub kill;
sub list;
sub new;
sub object;
sub self;
sub set_stack_size;
sub set_thread_exit_only;
sub tid;
sub wantarray;
sub yield;
}
package threads::shared {
sub _id(\[$@%]) ;
sub _refcnt(\[$@%]) ;
sub bless($;$) ;
sub blessed($) ;
sub cond_broadcast(\[$@%]) ;
sub cond_signal(\[$@%]) ;
sub cond_timedwait(\[$@%]$;\[$@%]) ;
sub cond_wait(\[$@%];\[$@%]) ;
sub is_shared(\[$@%]) ;
sub refaddr($) ;
sub reftype($) ;
sub share(\[$@%]) ;
}
package threads::shared::tie {
sub EXISTS;
sub EXTEND;
sub FIRSTKEY;
sub NEXTKEY;
sub POP;
sub PUSH;
sub SHIFT;
sub STORESIZE;
sub UNSHIFT;
}
package utf8 {
sub decode;
sub downgrade;
sub encode;
sub is_utf8;
sub native_to_unicode;
sub unicode_to_native;
sub upgrade;
sub valid;
}
package version {
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
sub vcmp;
}
package version::vxs {
sub VCMP;
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
}
